[
  {
    "kind": "ImportDeclaration",
    "text": "import 'source-map-support/register';",
    "children": [
      { "kind": "ImportKeyword", "text": "import", "children": [] },
      { "kind": "StringLiteral", "text": " 'source-map-support/register'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport 'reflect-metadata';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      { "kind": "StringLiteral", "text": " 'reflect-metadata'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport 'pg';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      { "kind": "StringLiteral", "text": " 'pg'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { NoteService } from './service/note-service';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { NoteService }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { NoteService }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " NoteService",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " NoteService",
                    "children": [{ "kind": "Identifier", "text": " NoteService", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './service/note-service'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { NoteFacade } from './facade/note-facade';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { NoteFacade }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { NoteFacade }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " NoteFacade",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " NoteFacade",
                    "children": [{ "kind": "Identifier", "text": " NoteFacade", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './facade/note-facade'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { NoteController } from './controller/note-controller';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { NoteController }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { NoteController }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " NoteController",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " NoteController",
                    "children": [{ "kind": "Identifier", "text": " NoteController", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './controller/note-controller'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { WatchListController } from './controller/watchlist-controller';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { WatchListController }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { WatchListController }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " WatchListController",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " WatchListController",
                    "children": [{ "kind": "Identifier", "text": " WatchListController", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './controller/watchlist-controller'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { WatchListFacade } from './facade/watchlist-facade';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { WatchListFacade }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { WatchListFacade }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " WatchListFacade",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " WatchListFacade",
                    "children": [{ "kind": "Identifier", "text": " WatchListFacade", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './facade/watchlist-facade'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { WatchListService } from './service/watchlist-service';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { WatchListService }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { WatchListService }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " WatchListService",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " WatchListService",
                    "children": [{ "kind": "Identifier", "text": " WatchListService", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './service/watchlist-service'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { CriteriaBuilderFactory } from './util/criteria-builder-factory';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { CriteriaBuilderFactory }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { CriteriaBuilderFactory }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " CriteriaBuilderFactory",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " CriteriaBuilderFactory",
                    "children": [{ "kind": "Identifier", "text": " CriteriaBuilderFactory", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './util/criteria-builder-factory'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { Kinesis, Lambda } from 'aws-sdk';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { Kinesis, Lambda }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { Kinesis, Lambda }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " Kinesis, Lambda",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " Kinesis",
                    "children": [{ "kind": "Identifier", "text": " Kinesis", "children": [] }]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "ImportSpecifier",
                    "text": " Lambda",
                    "children": [{ "kind": "Identifier", "text": " Lambda", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " 'aws-sdk'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { HttpRuntime } from '@nw/sdk-http';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { HttpRuntime }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { HttpRuntime }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " HttpRuntime",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " HttpRuntime",
                    "children": [{ "kind": "Identifier", "text": " HttpRuntime", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " '@nw/sdk-http'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { StreamRuntime } from '@nw/sdk-stream';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { StreamRuntime }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { StreamRuntime }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " StreamRuntime",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " StreamRuntime",
                    "children": [{ "kind": "Identifier", "text": " StreamRuntime", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " '@nw/sdk-stream'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { EventProcessor, ProtobufClient, StreamRepo, SystemOrigin } from '@nw/sdk-data';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { EventProcessor, ProtobufClient, StreamRepo, SystemOrigin }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { EventProcessor, ProtobufClient, StreamRepo, SystemOrigin }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " EventProcessor, ProtobufClient, StreamRepo, SystemOrigin",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " EventProcessor",
                    "children": [{ "kind": "Identifier", "text": " EventProcessor", "children": [] }]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "ImportSpecifier",
                    "text": " ProtobufClient",
                    "children": [{ "kind": "Identifier", "text": " ProtobufClient", "children": [] }]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "ImportSpecifier",
                    "text": " StreamRepo",
                    "children": [{ "kind": "Identifier", "text": " StreamRepo", "children": [] }]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "ImportSpecifier",
                    "text": " SystemOrigin",
                    "children": [{ "kind": "Identifier", "text": " SystemOrigin", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " '@nw/sdk-data'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { ProtobufSchemaFactory } from '@nw/protobuf-schemas';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { ProtobufSchemaFactory }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { ProtobufSchemaFactory }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " ProtobufSchemaFactory",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " ProtobufSchemaFactory",
                    "children": [{ "kind": "Identifier", "text": " ProtobufSchemaFactory", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " '@nw/protobuf-schemas'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { CoreConstants, CoreContext, CoreRuntime, ExecutionContext, HealthCheck, Log } from '@nw/sdk-core';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { CoreConstants, CoreContext, CoreRuntime, ExecutionContext, HealthCheck, Log }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { CoreConstants, CoreContext, CoreRuntime, ExecutionContext, HealthCheck, Log }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " CoreConstants, CoreContext, CoreRuntime, ExecutionContext, HealthCheck, Log",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " CoreConstants",
                    "children": [{ "kind": "Identifier", "text": " CoreConstants", "children": [] }]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "ImportSpecifier",
                    "text": " CoreContext",
                    "children": [{ "kind": "Identifier", "text": " CoreContext", "children": [] }]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "ImportSpecifier",
                    "text": " CoreRuntime",
                    "children": [{ "kind": "Identifier", "text": " CoreRuntime", "children": [] }]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "ImportSpecifier",
                    "text": " ExecutionContext",
                    "children": [{ "kind": "Identifier", "text": " ExecutionContext", "children": [] }]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "ImportSpecifier",
                    "text": " HealthCheck",
                    "children": [{ "kind": "Identifier", "text": " HealthCheck", "children": [] }]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "ImportSpecifier",
                    "text": " Log",
                    "children": [{ "kind": "Identifier", "text": " Log", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " '@nw/sdk-core'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { RuntimeContextImpl } from '@nw/sdk-core/lib/context/runtime-context-impl';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { RuntimeContextImpl }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { RuntimeContextImpl }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " RuntimeContextImpl",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " RuntimeContextImpl",
                    "children": [{ "kind": "Identifier", "text": " RuntimeContextImpl", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " '@nw/sdk-core/lib/context/runtime-context-impl'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { CoreContextImpl } from '@nw/sdk-core/lib/context/core-context-impl';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { CoreContextImpl }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { CoreContextImpl }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " CoreContextImpl",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " CoreContextImpl",
                    "children": [{ "kind": "Identifier", "text": " CoreContextImpl", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " '@nw/sdk-core/lib/context/core-context-impl'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { Callback, Context } from 'aws-lambda';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { Callback, Context }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { Callback, Context }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " Callback, Context",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " Callback",
                    "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "ImportSpecifier",
                    "text": " Context",
                    "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " 'aws-lambda'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { SQLWatchlistRepo } from './repo/sql-watchlist-repo';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { SQLWatchlistRepo }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { SQLWatchlistRepo }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " SQLWatchlistRepo",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " SQLWatchlistRepo",
                    "children": [{ "kind": "Identifier", "text": " SQLWatchlistRepo", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './repo/sql-watchlist-repo'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { SQLNoteRepo } from './repo/sql-note-repo';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { SQLNoteRepo }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { SQLNoteRepo }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " SQLNoteRepo",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " SQLNoteRepo",
                    "children": [{ "kind": "Identifier", "text": " SQLNoteRepo", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './repo/sql-note-repo'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { LambdaRepo } from './repo/lambda-repo';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { LambdaRepo }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { LambdaRepo }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " LambdaRepo",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " LambdaRepo",
                    "children": [{ "kind": "Identifier", "text": " LambdaRepo", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './repo/lambda-repo'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { IoTService } from './service/iot-service';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { IoTService }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { IoTService }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " IoTService",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " IoTService",
                    "children": [{ "kind": "Identifier", "text": " IoTService", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './service/iot-service'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { DbUtils } from './util/db-utils';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { DbUtils }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { DbUtils }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " DbUtils",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " DbUtils",
                    "children": [{ "kind": "Identifier", "text": " DbUtils", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './util/db-utils'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { ApiServiceRepo } from './repo/api-service-repo';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { ApiServiceRepo }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { ApiServiceRepo }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " ApiServiceRepo",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " ApiServiceRepo",
                    "children": [{ "kind": "Identifier", "text": " ApiServiceRepo", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './repo/api-service-repo'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { ApiService } from './service/api-service';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { ApiService }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { ApiService }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " ApiService",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " ApiService",
                    "children": [{ "kind": "Identifier", "text": " ApiService", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './service/api-service'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { DataSource } from './repo/sql-repo';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { DataSource }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { DataSource }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " DataSource",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " DataSource",
                    "children": [{ "kind": "Identifier", "text": " DataSource", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './repo/sql-repo'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { StreamController } from './controller/stream-controller';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { StreamController }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { StreamController }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " StreamController",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " StreamController",
                    "children": [{ "kind": "Identifier", "text": " StreamController", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './controller/stream-controller'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { TestLog } from '@nw/sdk-core/lib/testing/test-log';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { TestLog }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { TestLog }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " TestLog",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " TestLog",
                    "children": [{ "kind": "Identifier", "text": " TestLog", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " '@nw/sdk-core/lib/testing/test-log'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { Sequelize } from 'sequelize-typescript';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { Sequelize }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { Sequelize }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " Sequelize",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " Sequelize",
                    "children": [{ "kind": "Identifier", "text": " Sequelize", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " 'sequelize-typescript'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { PurgeService } from './service/purge-service';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { PurgeService }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { PurgeService }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " PurgeService",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " PurgeService",
                    "children": [{ "kind": "Identifier", "text": " PurgeService", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './service/purge-service'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { ClassicService } from './service/classic-service';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { ClassicService }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { ClassicService }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " ClassicService",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " ClassicService",
                    "children": [{ "kind": "Identifier", "text": " ClassicService", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './service/classic-service'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ImportDeclaration",
    "text": "\nimport { ClassicFacade } from './facade/classic-facade';",
    "children": [
      { "kind": "ImportKeyword", "text": "\nimport", "children": [] },
      {
        "kind": "ImportClause",
        "text": " { ClassicFacade }",
        "children": [
          {
            "kind": "NamedImports",
            "text": " { ClassicFacade }",
            "children": [
              { "kind": "FirstPunctuation", "text": " {", "children": [] },
              {
                "kind": "SyntaxList",
                "text": " ClassicFacade",
                "children": [
                  {
                    "kind": "ImportSpecifier",
                    "text": " ClassicFacade",
                    "children": [{ "kind": "Identifier", "text": " ClassicFacade", "children": [] }]
                  }
                ]
              },
              { "kind": "CloseBraceToken", "text": " }", "children": [] }
            ]
          }
        ]
      },
      { "kind": "FromKeyword", "text": " from", "children": [] },
      { "kind": "StringLiteral", "text": " './facade/classic-facade'", "children": [] },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\nrequire('aws-xray-sdk');",
    "children": [
      {
        "kind": "CallExpression",
        "text": "\n\nrequire('aws-xray-sdk')",
        "children": [
          { "kind": "Identifier", "text": "\n\nrequire", "children": [] },
          { "kind": "OpenParenToken", "text": "(", "children": [] },
          {
            "kind": "SyntaxList",
            "text": "'aws-xray-sdk'",
            "children": [{ "kind": "StringLiteral", "text": "'aws-xray-sdk'", "children": [] }]
          },
          { "kind": "CloseParenToken", "text": ")", "children": [] }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\nrequire('@nw/sdk-core').configureXray();",
    "children": [
      {
        "kind": "CallExpression",
        "text": "\nrequire('@nw/sdk-core').configureXray()",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\nrequire('@nw/sdk-core').configureXray",
            "children": [
              {
                "kind": "CallExpression",
                "text": "\nrequire('@nw/sdk-core')",
                "children": [
                  { "kind": "Identifier", "text": "\nrequire", "children": [] },
                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "'@nw/sdk-core'",
                    "children": [{ "kind": "StringLiteral", "text": "'@nw/sdk-core'", "children": [] }]
                  },
                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                ]
              },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "configureXray", "children": [] }
            ]
          },
          { "kind": "OpenParenToken", "text": "(", "children": [] },
          { "kind": "SyntaxList", "text": "", "children": [] },
          { "kind": "CloseParenToken", "text": ")", "children": [] }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\nrequire('@nw/sdk-core').InstrumentSequelize(require('sequelize'));",
    "children": [
      {
        "kind": "CallExpression",
        "text": "\nrequire('@nw/sdk-core').InstrumentSequelize(require('sequelize'))",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\nrequire('@nw/sdk-core').InstrumentSequelize",
            "children": [
              {
                "kind": "CallExpression",
                "text": "\nrequire('@nw/sdk-core')",
                "children": [
                  { "kind": "Identifier", "text": "\nrequire", "children": [] },
                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "'@nw/sdk-core'",
                    "children": [{ "kind": "StringLiteral", "text": "'@nw/sdk-core'", "children": [] }]
                  },
                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                ]
              },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "InstrumentSequelize", "children": [] }
            ]
          },
          { "kind": "OpenParenToken", "text": "(", "children": [] },
          {
            "kind": "SyntaxList",
            "text": "require('sequelize')",
            "children": [
              {
                "kind": "CallExpression",
                "text": "require('sequelize')",
                "children": [
                  { "kind": "Identifier", "text": "require", "children": [] },
                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "'sequelize'",
                    "children": [{ "kind": "StringLiteral", "text": "'sequelize'", "children": [] }]
                  },
                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                ]
              }
            ]
          },
          { "kind": "CloseParenToken", "text": ")", "children": [] }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "FirstStatement",
    "text": "\n\nconst dataSource: DataSource = <DataSource>{};",
    "children": [
      {
        "kind": "VariableDeclarationList",
        "text": "\n\nconst dataSource: DataSource = <DataSource>{}",
        "children": [
          { "kind": "ConstKeyword", "text": "\n\nconst", "children": [] },
          {
            "kind": "SyntaxList",
            "text": " dataSource: DataSource = <DataSource>{}",
            "children": [
              {
                "kind": "VariableDeclaration",
                "text": " dataSource: DataSource = <DataSource>{}",
                "children": [
                  { "kind": "Identifier", "text": " dataSource", "children": [] },
                  { "kind": "ColonToken", "text": ":", "children": [] },
                  {
                    "kind": "TypeReference",
                    "text": " DataSource",
                    "children": [{ "kind": "Identifier", "text": " DataSource", "children": [] }]
                  },
                  { "kind": "FirstAssignment", "text": " =", "children": [] },
                  {
                    "kind": "TypeAssertionExpression",
                    "text": " <DataSource>{}",
                    "children": [
                      { "kind": "FirstBinaryOperator", "text": " <", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": "DataSource",
                        "children": [{ "kind": "Identifier", "text": "DataSource", "children": [] }]
                      },
                      { "kind": "GreaterThanToken", "text": ">", "children": [] },
                      {
                        "kind": "ObjectLiteralExpression",
                        "text": "{}",
                        "children": [
                          { "kind": "FirstPunctuation", "text": "{", "children": [] },
                          { "kind": "SyntaxList", "text": "", "children": [] },
                          { "kind": "CloseBraceToken", "text": "}", "children": [] }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "FirstStatement",
    "text": "\nconst pbc = new ProtobufClient(new TestLog(), ProtobufSchemaFactory.loadProtobufs());",
    "children": [
      {
        "kind": "VariableDeclarationList",
        "text": "\nconst pbc = new ProtobufClient(new TestLog(), ProtobufSchemaFactory.loadProtobufs())",
        "children": [
          { "kind": "ConstKeyword", "text": "\nconst", "children": [] },
          {
            "kind": "SyntaxList",
            "text": " pbc = new ProtobufClient(new TestLog(), ProtobufSchemaFactory.loadProtobufs())",
            "children": [
              {
                "kind": "VariableDeclaration",
                "text": " pbc = new ProtobufClient(new TestLog(), ProtobufSchemaFactory.loadProtobufs())",
                "children": [
                  { "kind": "Identifier", "text": " pbc", "children": [] },
                  { "kind": "FirstAssignment", "text": " =", "children": [] },
                  {
                    "kind": "NewExpression",
                    "text": " new ProtobufClient(new TestLog(), ProtobufSchemaFactory.loadProtobufs())",
                    "children": [
                      { "kind": "NewKeyword", "text": " new", "children": [] },
                      { "kind": "Identifier", "text": " ProtobufClient", "children": [] },
                      { "kind": "OpenParenToken", "text": "(", "children": [] },
                      {
                        "kind": "SyntaxList",
                        "text": "new TestLog(), ProtobufSchemaFactory.loadProtobufs()",
                        "children": [
                          {
                            "kind": "NewExpression",
                            "text": "new TestLog()",
                            "children": [
                              { "kind": "NewKeyword", "text": "new", "children": [] },
                              { "kind": "Identifier", "text": " TestLog", "children": [] },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              { "kind": "SyntaxList", "text": "", "children": [] },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          {
                            "kind": "CallExpression",
                            "text": " ProtobufSchemaFactory.loadProtobufs()",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": " ProtobufSchemaFactory.loadProtobufs",
                                "children": [
                                  { "kind": "Identifier", "text": " ProtobufSchemaFactory", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "loadProtobufs", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              { "kind": "SyntaxList", "text": "", "children": [] },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          }
                        ]
                      },
                      { "kind": "CloseParenToken", "text": ")", "children": [] }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "FirstStatement",
    "text": "\n\nconst CONTEXT_OPTIONS = {\n    log: {\n        debug: process.env.LOG_DEBUG || true,\n        console: process.env.LOG_CONSOLE || true\n    }\n};",
    "children": [
      {
        "kind": "VariableDeclarationList",
        "text": "\n\nconst CONTEXT_OPTIONS = {\n    log: {\n        debug: process.env.LOG_DEBUG || true,\n        console: process.env.LOG_CONSOLE || true\n    }\n}",
        "children": [
          { "kind": "ConstKeyword", "text": "\n\nconst", "children": [] },
          {
            "kind": "SyntaxList",
            "text": " CONTEXT_OPTIONS = {\n    log: {\n        debug: process.env.LOG_DEBUG || true,\n        console: process.env.LOG_CONSOLE || true\n    }\n}",
            "children": [
              {
                "kind": "VariableDeclaration",
                "text": " CONTEXT_OPTIONS = {\n    log: {\n        debug: process.env.LOG_DEBUG || true,\n        console: process.env.LOG_CONSOLE || true\n    }\n}",
                "children": [
                  { "kind": "Identifier", "text": " CONTEXT_OPTIONS", "children": [] },
                  { "kind": "FirstAssignment", "text": " =", "children": [] },
                  {
                    "kind": "ObjectLiteralExpression",
                    "text": " {\n    log: {\n        debug: process.env.LOG_DEBUG || true,\n        console: process.env.LOG_CONSOLE || true\n    }\n}",
                    "children": [
                      { "kind": "FirstPunctuation", "text": " {", "children": [] },
                      {
                        "kind": "SyntaxList",
                        "text": "\n    log: {\n        debug: process.env.LOG_DEBUG || true,\n        console: process.env.LOG_CONSOLE || true\n    }",
                        "children": [
                          {
                            "kind": "PropertyAssignment",
                            "text": "\n    log: {\n        debug: process.env.LOG_DEBUG || true,\n        console: process.env.LOG_CONSOLE || true\n    }",
                            "children": [
                              { "kind": "Identifier", "text": "\n    log", "children": [] },
                              { "kind": "ColonToken", "text": ":", "children": [] },
                              {
                                "kind": "ObjectLiteralExpression",
                                "text": " {\n        debug: process.env.LOG_DEBUG || true,\n        console: process.env.LOG_CONSOLE || true\n    }",
                                "children": [
                                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "\n        debug: process.env.LOG_DEBUG || true,\n        console: process.env.LOG_CONSOLE || true",
                                    "children": [
                                      {
                                        "kind": "PropertyAssignment",
                                        "text": "\n        debug: process.env.LOG_DEBUG || true",
                                        "children": [
                                          { "kind": "Identifier", "text": "\n        debug", "children": [] },
                                          { "kind": "ColonToken", "text": ":", "children": [] },
                                          {
                                            "kind": "BinaryExpression",
                                            "text": " process.env.LOG_DEBUG || true",
                                            "children": [
                                              {
                                                "kind": "PropertyAccessExpression",
                                                "text": " process.env.LOG_DEBUG",
                                                "children": [
                                                  {
                                                    "kind": "PropertyAccessExpression",
                                                    "text": " process.env",
                                                    "children": [
                                                      { "kind": "Identifier", "text": " process", "children": [] },
                                                      { "kind": "DotToken", "text": ".", "children": [] },
                                                      { "kind": "Identifier", "text": "env", "children": [] }
                                                    ]
                                                  },
                                                  { "kind": "DotToken", "text": ".", "children": [] },
                                                  { "kind": "Identifier", "text": "LOG_DEBUG", "children": [] }
                                                ]
                                              },
                                              { "kind": "BarBarToken", "text": " ||", "children": [] },
                                              { "kind": "TrueKeyword", "text": " true", "children": [] }
                                            ]
                                          }
                                        ]
                                      },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAssignment",
                                        "text": "\n        console: process.env.LOG_CONSOLE || true",
                                        "children": [
                                          { "kind": "Identifier", "text": "\n        console", "children": [] },
                                          { "kind": "ColonToken", "text": ":", "children": [] },
                                          {
                                            "kind": "BinaryExpression",
                                            "text": " process.env.LOG_CONSOLE || true",
                                            "children": [
                                              {
                                                "kind": "PropertyAccessExpression",
                                                "text": " process.env.LOG_CONSOLE",
                                                "children": [
                                                  {
                                                    "kind": "PropertyAccessExpression",
                                                    "text": " process.env",
                                                    "children": [
                                                      { "kind": "Identifier", "text": " process", "children": [] },
                                                      { "kind": "DotToken", "text": ".", "children": [] },
                                                      { "kind": "Identifier", "text": "env", "children": [] }
                                                    ]
                                                  },
                                                  { "kind": "DotToken", "text": ".", "children": [] },
                                                  { "kind": "Identifier", "text": "LOG_CONSOLE", "children": [] }
                                                ]
                                              },
                                              { "kind": "BarBarToken", "text": " ||", "children": [] },
                                              { "kind": "TrueKeyword", "text": " true", "children": [] }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "FirstStatement",
    "text": "\n\nexport const APP_PROVIDERS = [\n    {\n        provide: Kinesis,\n        useValue: new Kinesis({ region: process.env.STREAM_REGION }) // consider using factory, same as Lambda below\n    },\n    {\n        provide: Lambda,\n        useFactory: (log: Log) => {\n            return new Lambda({ apiVersion: '2015-03-31' });\n        },\n        deps: [Log]\n    },\n    {\n        provide: ProtobufClient,\n        useFactory: (log: Log) => {\n            return pbc;\n        },\n        deps: [Log],\n        isAsync: true\n    },\n    {\n        provide: EventProcessor,\n        useFactory: (log: Log, service: StreamController, protobufClient: ProtobufClient) => {\n            return new EventProcessor(log, service, protobufClient);\n        },\n        deps: [Log, StreamController, ProtobufClient]\n    },\n    {\n        provide: 'StreamWatchlistRepo',\n        useFactory: (log: Log, executionContext: ExecutionContext, protobufClient: ProtobufClient, kinesis: Kinesis): StreamRepo => {\n            return new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis);\n        },\n        deps: [Log, ExecutionContext, ProtobufClient, Kinesis]\n    },\n    {\n        provide: SQLWatchlistRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLWatchlistRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    },\n    {\n        provide: SQLNoteRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLNoteRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    },\n    StreamController,\n    CriteriaBuilderFactory,\n    WatchListService,\n    WatchListFacade,\n    NoteService,\n    NoteFacade,\n    {\n        provide: LambdaRepo,\n        useFactory: (log: Log, executionContext: ExecutionContext, lambda: Lambda, iotArn: string): LambdaRepo => {\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN;\n            return new LambdaRepo(log, executionContext, lambda, iotArn, recoArn);\n        },\n        deps: [Log, ExecutionContext, Lambda, 'env.IOT_SERVICE_LAMBDA_ARN']\n    },\n    IoTService,\n    ApiServiceRepo,\n    ApiService,\n    ClassicService,\n    ClassicFacade,\n];",
    "children": [
      {
        "kind": "SyntaxList",
        "text": "\n\nexport",
        "children": [{ "kind": "ExportKeyword", "text": "\n\nexport", "children": [] }]
      },
      {
        "kind": "VariableDeclarationList",
        "text": " const APP_PROVIDERS = [\n    {\n        provide: Kinesis,\n        useValue: new Kinesis({ region: process.env.STREAM_REGION }) // consider using factory, same as Lambda below\n    },\n    {\n        provide: Lambda,\n        useFactory: (log: Log) => {\n            return new Lambda({ apiVersion: '2015-03-31' });\n        },\n        deps: [Log]\n    },\n    {\n        provide: ProtobufClient,\n        useFactory: (log: Log) => {\n            return pbc;\n        },\n        deps: [Log],\n        isAsync: true\n    },\n    {\n        provide: EventProcessor,\n        useFactory: (log: Log, service: StreamController, protobufClient: ProtobufClient) => {\n            return new EventProcessor(log, service, protobufClient);\n        },\n        deps: [Log, StreamController, ProtobufClient]\n    },\n    {\n        provide: 'StreamWatchlistRepo',\n        useFactory: (log: Log, executionContext: ExecutionContext, protobufClient: ProtobufClient, kinesis: Kinesis): StreamRepo => {\n            return new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis);\n        },\n        deps: [Log, ExecutionContext, ProtobufClient, Kinesis]\n    },\n    {\n        provide: SQLWatchlistRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLWatchlistRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    },\n    {\n        provide: SQLNoteRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLNoteRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    },\n    StreamController,\n    CriteriaBuilderFactory,\n    WatchListService,\n    WatchListFacade,\n    NoteService,\n    NoteFacade,\n    {\n        provide: LambdaRepo,\n        useFactory: (log: Log, executionContext: ExecutionContext, lambda: Lambda, iotArn: string): LambdaRepo => {\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN;\n            return new LambdaRepo(log, executionContext, lambda, iotArn, recoArn);\n        },\n        deps: [Log, ExecutionContext, Lambda, 'env.IOT_SERVICE_LAMBDA_ARN']\n    },\n    IoTService,\n    ApiServiceRepo,\n    ApiService,\n    ClassicService,\n    ClassicFacade,\n]",
        "children": [
          { "kind": "ConstKeyword", "text": " const", "children": [] },
          {
            "kind": "SyntaxList",
            "text": " APP_PROVIDERS = [\n    {\n        provide: Kinesis,\n        useValue: new Kinesis({ region: process.env.STREAM_REGION }) // consider using factory, same as Lambda below\n    },\n    {\n        provide: Lambda,\n        useFactory: (log: Log) => {\n            return new Lambda({ apiVersion: '2015-03-31' });\n        },\n        deps: [Log]\n    },\n    {\n        provide: ProtobufClient,\n        useFactory: (log: Log) => {\n            return pbc;\n        },\n        deps: [Log],\n        isAsync: true\n    },\n    {\n        provide: EventProcessor,\n        useFactory: (log: Log, service: StreamController, protobufClient: ProtobufClient) => {\n            return new EventProcessor(log, service, protobufClient);\n        },\n        deps: [Log, StreamController, ProtobufClient]\n    },\n    {\n        provide: 'StreamWatchlistRepo',\n        useFactory: (log: Log, executionContext: ExecutionContext, protobufClient: ProtobufClient, kinesis: Kinesis): StreamRepo => {\n            return new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis);\n        },\n        deps: [Log, ExecutionContext, ProtobufClient, Kinesis]\n    },\n    {\n        provide: SQLWatchlistRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLWatchlistRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    },\n    {\n        provide: SQLNoteRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLNoteRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    },\n    StreamController,\n    CriteriaBuilderFactory,\n    WatchListService,\n    WatchListFacade,\n    NoteService,\n    NoteFacade,\n    {\n        provide: LambdaRepo,\n        useFactory: (log: Log, executionContext: ExecutionContext, lambda: Lambda, iotArn: string): LambdaRepo => {\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN;\n            return new LambdaRepo(log, executionContext, lambda, iotArn, recoArn);\n        },\n        deps: [Log, ExecutionContext, Lambda, 'env.IOT_SERVICE_LAMBDA_ARN']\n    },\n    IoTService,\n    ApiServiceRepo,\n    ApiService,\n    ClassicService,\n    ClassicFacade,\n]",
            "children": [
              {
                "kind": "VariableDeclaration",
                "text": " APP_PROVIDERS = [\n    {\n        provide: Kinesis,\n        useValue: new Kinesis({ region: process.env.STREAM_REGION }) // consider using factory, same as Lambda below\n    },\n    {\n        provide: Lambda,\n        useFactory: (log: Log) => {\n            return new Lambda({ apiVersion: '2015-03-31' });\n        },\n        deps: [Log]\n    },\n    {\n        provide: ProtobufClient,\n        useFactory: (log: Log) => {\n            return pbc;\n        },\n        deps: [Log],\n        isAsync: true\n    },\n    {\n        provide: EventProcessor,\n        useFactory: (log: Log, service: StreamController, protobufClient: ProtobufClient) => {\n            return new EventProcessor(log, service, protobufClient);\n        },\n        deps: [Log, StreamController, ProtobufClient]\n    },\n    {\n        provide: 'StreamWatchlistRepo',\n        useFactory: (log: Log, executionContext: ExecutionContext, protobufClient: ProtobufClient, kinesis: Kinesis): StreamRepo => {\n            return new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis);\n        },\n        deps: [Log, ExecutionContext, ProtobufClient, Kinesis]\n    },\n    {\n        provide: SQLWatchlistRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLWatchlistRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    },\n    {\n        provide: SQLNoteRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLNoteRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    },\n    StreamController,\n    CriteriaBuilderFactory,\n    WatchListService,\n    WatchListFacade,\n    NoteService,\n    NoteFacade,\n    {\n        provide: LambdaRepo,\n        useFactory: (log: Log, executionContext: ExecutionContext, lambda: Lambda, iotArn: string): LambdaRepo => {\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN;\n            return new LambdaRepo(log, executionContext, lambda, iotArn, recoArn);\n        },\n        deps: [Log, ExecutionContext, Lambda, 'env.IOT_SERVICE_LAMBDA_ARN']\n    },\n    IoTService,\n    ApiServiceRepo,\n    ApiService,\n    ClassicService,\n    ClassicFacade,\n]",
                "children": [
                  { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                  { "kind": "FirstAssignment", "text": " =", "children": [] },
                  {
                    "kind": "ArrayLiteralExpression",
                    "text": " [\n    {\n        provide: Kinesis,\n        useValue: new Kinesis({ region: process.env.STREAM_REGION }) // consider using factory, same as Lambda below\n    },\n    {\n        provide: Lambda,\n        useFactory: (log: Log) => {\n            return new Lambda({ apiVersion: '2015-03-31' });\n        },\n        deps: [Log]\n    },\n    {\n        provide: ProtobufClient,\n        useFactory: (log: Log) => {\n            return pbc;\n        },\n        deps: [Log],\n        isAsync: true\n    },\n    {\n        provide: EventProcessor,\n        useFactory: (log: Log, service: StreamController, protobufClient: ProtobufClient) => {\n            return new EventProcessor(log, service, protobufClient);\n        },\n        deps: [Log, StreamController, ProtobufClient]\n    },\n    {\n        provide: 'StreamWatchlistRepo',\n        useFactory: (log: Log, executionContext: ExecutionContext, protobufClient: ProtobufClient, kinesis: Kinesis): StreamRepo => {\n            return new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis);\n        },\n        deps: [Log, ExecutionContext, ProtobufClient, Kinesis]\n    },\n    {\n        provide: SQLWatchlistRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLWatchlistRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    },\n    {\n        provide: SQLNoteRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLNoteRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    },\n    StreamController,\n    CriteriaBuilderFactory,\n    WatchListService,\n    WatchListFacade,\n    NoteService,\n    NoteFacade,\n    {\n        provide: LambdaRepo,\n        useFactory: (log: Log, executionContext: ExecutionContext, lambda: Lambda, iotArn: string): LambdaRepo => {\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN;\n            return new LambdaRepo(log, executionContext, lambda, iotArn, recoArn);\n        },\n        deps: [Log, ExecutionContext, Lambda, 'env.IOT_SERVICE_LAMBDA_ARN']\n    },\n    IoTService,\n    ApiServiceRepo,\n    ApiService,\n    ClassicService,\n    ClassicFacade,\n]",
                    "children": [
                      { "kind": "OpenBracketToken", "text": " [", "children": [] },
                      {
                        "kind": "SyntaxList",
                        "text": "\n    {\n        provide: Kinesis,\n        useValue: new Kinesis({ region: process.env.STREAM_REGION }) // consider using factory, same as Lambda below\n    },\n    {\n        provide: Lambda,\n        useFactory: (log: Log) => {\n            return new Lambda({ apiVersion: '2015-03-31' });\n        },\n        deps: [Log]\n    },\n    {\n        provide: ProtobufClient,\n        useFactory: (log: Log) => {\n            return pbc;\n        },\n        deps: [Log],\n        isAsync: true\n    },\n    {\n        provide: EventProcessor,\n        useFactory: (log: Log, service: StreamController, protobufClient: ProtobufClient) => {\n            return new EventProcessor(log, service, protobufClient);\n        },\n        deps: [Log, StreamController, ProtobufClient]\n    },\n    {\n        provide: 'StreamWatchlistRepo',\n        useFactory: (log: Log, executionContext: ExecutionContext, protobufClient: ProtobufClient, kinesis: Kinesis): StreamRepo => {\n            return new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis);\n        },\n        deps: [Log, ExecutionContext, ProtobufClient, Kinesis]\n    },\n    {\n        provide: SQLWatchlistRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLWatchlistRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    },\n    {\n        provide: SQLNoteRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLNoteRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    },\n    StreamController,\n    CriteriaBuilderFactory,\n    WatchListService,\n    WatchListFacade,\n    NoteService,\n    NoteFacade,\n    {\n        provide: LambdaRepo,\n        useFactory: (log: Log, executionContext: ExecutionContext, lambda: Lambda, iotArn: string): LambdaRepo => {\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN;\n            return new LambdaRepo(log, executionContext, lambda, iotArn, recoArn);\n        },\n        deps: [Log, ExecutionContext, Lambda, 'env.IOT_SERVICE_LAMBDA_ARN']\n    },\n    IoTService,\n    ApiServiceRepo,\n    ApiService,\n    ClassicService,\n    ClassicFacade,",
                        "children": [
                          {
                            "kind": "ObjectLiteralExpression",
                            "text": "\n    {\n        provide: Kinesis,\n        useValue: new Kinesis({ region: process.env.STREAM_REGION }) // consider using factory, same as Lambda below\n    }",
                            "children": [
                              { "kind": "FirstPunctuation", "text": "\n    {", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "\n        provide: Kinesis,\n        useValue: new Kinesis({ region: process.env.STREAM_REGION })",
                                "children": [
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        provide: Kinesis",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        provide", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      { "kind": "Identifier", "text": " Kinesis", "children": [] }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        useValue: new Kinesis({ region: process.env.STREAM_REGION })",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        useValue", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "NewExpression",
                                        "text": " new Kinesis({ region: process.env.STREAM_REGION })",
                                        "children": [
                                          { "kind": "NewKeyword", "text": " new", "children": [] },
                                          { "kind": "Identifier", "text": " Kinesis", "children": [] },
                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "{ region: process.env.STREAM_REGION }",
                                            "children": [
                                              {
                                                "kind": "ObjectLiteralExpression",
                                                "text": "{ region: process.env.STREAM_REGION }",
                                                "children": [
                                                  { "kind": "FirstPunctuation", "text": "{", "children": [] },
                                                  {
                                                    "kind": "SyntaxList",
                                                    "text": " region: process.env.STREAM_REGION",
                                                    "children": [
                                                      {
                                                        "kind": "PropertyAssignment",
                                                        "text": " region: process.env.STREAM_REGION",
                                                        "children": [
                                                          { "kind": "Identifier", "text": " region", "children": [] },
                                                          { "kind": "ColonToken", "text": ":", "children": [] },
                                                          {
                                                            "kind": "PropertyAccessExpression",
                                                            "text": " process.env.STREAM_REGION",
                                                            "children": [
                                                              {
                                                                "kind": "PropertyAccessExpression",
                                                                "text": " process.env",
                                                                "children": [
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": " process",
                                                                    "children": []
                                                                  },
                                                                  { "kind": "DotToken", "text": ".", "children": [] },
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": "env",
                                                                    "children": []
                                                                  }
                                                                ]
                                                              },
                                                              { "kind": "DotToken", "text": ".", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "STREAM_REGION",
                                                                "children": []
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  { "kind": "CloseBraceToken", "text": " }", "children": [] }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "kind": "CloseBraceToken",
                                "text": " // consider using factory, same as Lambda below\n    }",
                                "children": []
                              }
                            ]
                          },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          {
                            "kind": "ObjectLiteralExpression",
                            "text": "\n    {\n        provide: Lambda,\n        useFactory: (log: Log) => {\n            return new Lambda({ apiVersion: '2015-03-31' });\n        },\n        deps: [Log]\n    }",
                            "children": [
                              { "kind": "FirstPunctuation", "text": "\n    {", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "\n        provide: Lambda,\n        useFactory: (log: Log) => {\n            return new Lambda({ apiVersion: '2015-03-31' });\n        },\n        deps: [Log]",
                                "children": [
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        provide: Lambda",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        provide", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      { "kind": "Identifier", "text": " Lambda", "children": [] }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        useFactory: (log: Log) => {\n            return new Lambda({ apiVersion: '2015-03-31' });\n        }",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        useFactory", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrowFunction",
                                        "text": " (log: Log) => {\n            return new Lambda({ apiVersion: '2015-03-31' });\n        }",
                                        "children": [
                                          { "kind": "OpenParenToken", "text": " (", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "log: Log",
                                            "children": [
                                              {
                                                "kind": "Parameter",
                                                "text": "log: Log",
                                                "children": [
                                                  { "kind": "Identifier", "text": "log", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " Log",
                                                    "children": [
                                                      { "kind": "Identifier", "text": " Log", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] },
                                          { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
                                          {
                                            "kind": "Block",
                                            "text": " {\n            return new Lambda({ apiVersion: '2015-03-31' });\n        }",
                                            "children": [
                                              { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                              {
                                                "kind": "SyntaxList",
                                                "text": "\n            return new Lambda({ apiVersion: '2015-03-31' });",
                                                "children": [
                                                  {
                                                    "kind": "ReturnStatement",
                                                    "text": "\n            return new Lambda({ apiVersion: '2015-03-31' });",
                                                    "children": [
                                                      {
                                                        "kind": "ReturnKeyword",
                                                        "text": "\n            return",
                                                        "children": []
                                                      },
                                                      {
                                                        "kind": "NewExpression",
                                                        "text": " new Lambda({ apiVersion: '2015-03-31' })",
                                                        "children": [
                                                          { "kind": "NewKeyword", "text": " new", "children": [] },
                                                          { "kind": "Identifier", "text": " Lambda", "children": [] },
                                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                          {
                                                            "kind": "SyntaxList",
                                                            "text": "{ apiVersion: '2015-03-31' }",
                                                            "children": [
                                                              {
                                                                "kind": "ObjectLiteralExpression",
                                                                "text": "{ apiVersion: '2015-03-31' }",
                                                                "children": [
                                                                  {
                                                                    "kind": "FirstPunctuation",
                                                                    "text": "{",
                                                                    "children": []
                                                                  },
                                                                  {
                                                                    "kind": "SyntaxList",
                                                                    "text": " apiVersion: '2015-03-31'",
                                                                    "children": [
                                                                      {
                                                                        "kind": "PropertyAssignment",
                                                                        "text": " apiVersion: '2015-03-31'",
                                                                        "children": [
                                                                          {
                                                                            "kind": "Identifier",
                                                                            "text": " apiVersion",
                                                                            "children": []
                                                                          },
                                                                          {
                                                                            "kind": "ColonToken",
                                                                            "text": ":",
                                                                            "children": []
                                                                          },
                                                                          {
                                                                            "kind": "StringLiteral",
                                                                            "text": " '2015-03-31'",
                                                                            "children": []
                                                                          }
                                                                        ]
                                                                      }
                                                                    ]
                                                                  },
                                                                  {
                                                                    "kind": "CloseBraceToken",
                                                                    "text": " }",
                                                                    "children": []
                                                                  }
                                                                ]
                                                              }
                                                            ]
                                                          },
                                                          { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CloseBraceToken", "text": "\n        }", "children": [] }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        deps: [Log]",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        deps", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrayLiteralExpression",
                                        "text": " [Log]",
                                        "children": [
                                          { "kind": "OpenBracketToken", "text": " [", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "Log",
                                            "children": [{ "kind": "Identifier", "text": "Log", "children": [] }]
                                          },
                                          { "kind": "CloseBracketToken", "text": "]", "children": [] }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                            ]
                          },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          {
                            "kind": "ObjectLiteralExpression",
                            "text": "\n    {\n        provide: ProtobufClient,\n        useFactory: (log: Log) => {\n            return pbc;\n        },\n        deps: [Log],\n        isAsync: true\n    }",
                            "children": [
                              { "kind": "FirstPunctuation", "text": "\n    {", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "\n        provide: ProtobufClient,\n        useFactory: (log: Log) => {\n            return pbc;\n        },\n        deps: [Log],\n        isAsync: true",
                                "children": [
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        provide: ProtobufClient",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        provide", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      { "kind": "Identifier", "text": " ProtobufClient", "children": [] }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        useFactory: (log: Log) => {\n            return pbc;\n        }",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        useFactory", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrowFunction",
                                        "text": " (log: Log) => {\n            return pbc;\n        }",
                                        "children": [
                                          { "kind": "OpenParenToken", "text": " (", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "log: Log",
                                            "children": [
                                              {
                                                "kind": "Parameter",
                                                "text": "log: Log",
                                                "children": [
                                                  { "kind": "Identifier", "text": "log", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " Log",
                                                    "children": [
                                                      { "kind": "Identifier", "text": " Log", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] },
                                          { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
                                          {
                                            "kind": "Block",
                                            "text": " {\n            return pbc;\n        }",
                                            "children": [
                                              { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                              {
                                                "kind": "SyntaxList",
                                                "text": "\n            return pbc;",
                                                "children": [
                                                  {
                                                    "kind": "ReturnStatement",
                                                    "text": "\n            return pbc;",
                                                    "children": [
                                                      {
                                                        "kind": "ReturnKeyword",
                                                        "text": "\n            return",
                                                        "children": []
                                                      },
                                                      { "kind": "Identifier", "text": " pbc", "children": [] },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CloseBraceToken", "text": "\n        }", "children": [] }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        deps: [Log]",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        deps", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrayLiteralExpression",
                                        "text": " [Log]",
                                        "children": [
                                          { "kind": "OpenBracketToken", "text": " [", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "Log",
                                            "children": [{ "kind": "Identifier", "text": "Log", "children": [] }]
                                          },
                                          { "kind": "CloseBracketToken", "text": "]", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        isAsync: true",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        isAsync", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      { "kind": "TrueKeyword", "text": " true", "children": [] }
                                    ]
                                  }
                                ]
                              },
                              { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                            ]
                          },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          {
                            "kind": "ObjectLiteralExpression",
                            "text": "\n    {\n        provide: EventProcessor,\n        useFactory: (log: Log, service: StreamController, protobufClient: ProtobufClient) => {\n            return new EventProcessor(log, service, protobufClient);\n        },\n        deps: [Log, StreamController, ProtobufClient]\n    }",
                            "children": [
                              { "kind": "FirstPunctuation", "text": "\n    {", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "\n        provide: EventProcessor,\n        useFactory: (log: Log, service: StreamController, protobufClient: ProtobufClient) => {\n            return new EventProcessor(log, service, protobufClient);\n        },\n        deps: [Log, StreamController, ProtobufClient]",
                                "children": [
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        provide: EventProcessor",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        provide", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      { "kind": "Identifier", "text": " EventProcessor", "children": [] }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        useFactory: (log: Log, service: StreamController, protobufClient: ProtobufClient) => {\n            return new EventProcessor(log, service, protobufClient);\n        }",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        useFactory", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrowFunction",
                                        "text": " (log: Log, service: StreamController, protobufClient: ProtobufClient) => {\n            return new EventProcessor(log, service, protobufClient);\n        }",
                                        "children": [
                                          { "kind": "OpenParenToken", "text": " (", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "log: Log, service: StreamController, protobufClient: ProtobufClient",
                                            "children": [
                                              {
                                                "kind": "Parameter",
                                                "text": "log: Log",
                                                "children": [
                                                  { "kind": "Identifier", "text": "log", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " Log",
                                                    "children": [
                                                      { "kind": "Identifier", "text": " Log", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " service: StreamController",
                                                "children": [
                                                  { "kind": "Identifier", "text": " service", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " StreamController",
                                                    "children": [
                                                      {
                                                        "kind": "Identifier",
                                                        "text": " StreamController",
                                                        "children": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " protobufClient: ProtobufClient",
                                                "children": [
                                                  { "kind": "Identifier", "text": " protobufClient", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " ProtobufClient",
                                                    "children": [
                                                      {
                                                        "kind": "Identifier",
                                                        "text": " ProtobufClient",
                                                        "children": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] },
                                          { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
                                          {
                                            "kind": "Block",
                                            "text": " {\n            return new EventProcessor(log, service, protobufClient);\n        }",
                                            "children": [
                                              { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                              {
                                                "kind": "SyntaxList",
                                                "text": "\n            return new EventProcessor(log, service, protobufClient);",
                                                "children": [
                                                  {
                                                    "kind": "ReturnStatement",
                                                    "text": "\n            return new EventProcessor(log, service, protobufClient);",
                                                    "children": [
                                                      {
                                                        "kind": "ReturnKeyword",
                                                        "text": "\n            return",
                                                        "children": []
                                                      },
                                                      {
                                                        "kind": "NewExpression",
                                                        "text": " new EventProcessor(log, service, protobufClient)",
                                                        "children": [
                                                          { "kind": "NewKeyword", "text": " new", "children": [] },
                                                          {
                                                            "kind": "Identifier",
                                                            "text": " EventProcessor",
                                                            "children": []
                                                          },
                                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                          {
                                                            "kind": "SyntaxList",
                                                            "text": "log, service, protobufClient",
                                                            "children": [
                                                              { "kind": "Identifier", "text": "log", "children": [] },
                                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " service",
                                                                "children": []
                                                              },
                                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " protobufClient",
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CloseBraceToken", "text": "\n        }", "children": [] }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        deps: [Log, StreamController, ProtobufClient]",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        deps", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrayLiteralExpression",
                                        "text": " [Log, StreamController, ProtobufClient]",
                                        "children": [
                                          { "kind": "OpenBracketToken", "text": " [", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "Log, StreamController, ProtobufClient",
                                            "children": [
                                              { "kind": "Identifier", "text": "Log", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "Identifier", "text": " StreamController", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "Identifier", "text": " ProtobufClient", "children": [] }
                                            ]
                                          },
                                          { "kind": "CloseBracketToken", "text": "]", "children": [] }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                            ]
                          },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          {
                            "kind": "ObjectLiteralExpression",
                            "text": "\n    {\n        provide: 'StreamWatchlistRepo',\n        useFactory: (log: Log, executionContext: ExecutionContext, protobufClient: ProtobufClient, kinesis: Kinesis): StreamRepo => {\n            return new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis);\n        },\n        deps: [Log, ExecutionContext, ProtobufClient, Kinesis]\n    }",
                            "children": [
                              { "kind": "FirstPunctuation", "text": "\n    {", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "\n        provide: 'StreamWatchlistRepo',\n        useFactory: (log: Log, executionContext: ExecutionContext, protobufClient: ProtobufClient, kinesis: Kinesis): StreamRepo => {\n            return new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis);\n        },\n        deps: [Log, ExecutionContext, ProtobufClient, Kinesis]",
                                "children": [
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        provide: 'StreamWatchlistRepo'",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        provide", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      { "kind": "StringLiteral", "text": " 'StreamWatchlistRepo'", "children": [] }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        useFactory: (log: Log, executionContext: ExecutionContext, protobufClient: ProtobufClient, kinesis: Kinesis): StreamRepo => {\n            return new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis);\n        }",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        useFactory", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrowFunction",
                                        "text": " (log: Log, executionContext: ExecutionContext, protobufClient: ProtobufClient, kinesis: Kinesis): StreamRepo => {\n            return new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis);\n        }",
                                        "children": [
                                          { "kind": "OpenParenToken", "text": " (", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "log: Log, executionContext: ExecutionContext, protobufClient: ProtobufClient, kinesis: Kinesis",
                                            "children": [
                                              {
                                                "kind": "Parameter",
                                                "text": "log: Log",
                                                "children": [
                                                  { "kind": "Identifier", "text": "log", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " Log",
                                                    "children": [
                                                      { "kind": "Identifier", "text": " Log", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " executionContext: ExecutionContext",
                                                "children": [
                                                  { "kind": "Identifier", "text": " executionContext", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " ExecutionContext",
                                                    "children": [
                                                      {
                                                        "kind": "Identifier",
                                                        "text": " ExecutionContext",
                                                        "children": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " protobufClient: ProtobufClient",
                                                "children": [
                                                  { "kind": "Identifier", "text": " protobufClient", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " ProtobufClient",
                                                    "children": [
                                                      {
                                                        "kind": "Identifier",
                                                        "text": " ProtobufClient",
                                                        "children": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " kinesis: Kinesis",
                                                "children": [
                                                  { "kind": "Identifier", "text": " kinesis", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " Kinesis",
                                                    "children": [
                                                      { "kind": "Identifier", "text": " Kinesis", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] },
                                          { "kind": "ColonToken", "text": ":", "children": [] },
                                          {
                                            "kind": "TypeReference",
                                            "text": " StreamRepo",
                                            "children": [
                                              { "kind": "Identifier", "text": " StreamRepo", "children": [] }
                                            ]
                                          },
                                          { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
                                          {
                                            "kind": "Block",
                                            "text": " {\n            return new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis);\n        }",
                                            "children": [
                                              { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                              {
                                                "kind": "SyntaxList",
                                                "text": "\n            return new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis);",
                                                "children": [
                                                  {
                                                    "kind": "ReturnStatement",
                                                    "text": "\n            return new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis);",
                                                    "children": [
                                                      {
                                                        "kind": "ReturnKeyword",
                                                        "text": "\n            return",
                                                        "children": []
                                                      },
                                                      {
                                                        "kind": "NewExpression",
                                                        "text": " new StreamRepo(log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis)",
                                                        "children": [
                                                          { "kind": "NewKeyword", "text": " new", "children": [] },
                                                          {
                                                            "kind": "Identifier",
                                                            "text": " StreamRepo",
                                                            "children": []
                                                          },
                                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                          {
                                                            "kind": "SyntaxList",
                                                            "text": "log, executionContext, protobufClient, SystemOrigin.NEW_WAVE, process.env.WATCHLIST_STREAM_NAME, kinesis",
                                                            "children": [
                                                              { "kind": "Identifier", "text": "log", "children": [] },
                                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " executionContext",
                                                                "children": []
                                                              },
                                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " protobufClient",
                                                                "children": []
                                                              },
                                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                                              {
                                                                "kind": "PropertyAccessExpression",
                                                                "text": " SystemOrigin.NEW_WAVE",
                                                                "children": [
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": " SystemOrigin",
                                                                    "children": []
                                                                  },
                                                                  { "kind": "DotToken", "text": ".", "children": [] },
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": "NEW_WAVE",
                                                                    "children": []
                                                                  }
                                                                ]
                                                              },
                                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                                              {
                                                                "kind": "PropertyAccessExpression",
                                                                "text": " process.env.WATCHLIST_STREAM_NAME",
                                                                "children": [
                                                                  {
                                                                    "kind": "PropertyAccessExpression",
                                                                    "text": " process.env",
                                                                    "children": [
                                                                      {
                                                                        "kind": "Identifier",
                                                                        "text": " process",
                                                                        "children": []
                                                                      },
                                                                      {
                                                                        "kind": "DotToken",
                                                                        "text": ".",
                                                                        "children": []
                                                                      },
                                                                      {
                                                                        "kind": "Identifier",
                                                                        "text": "env",
                                                                        "children": []
                                                                      }
                                                                    ]
                                                                  },
                                                                  { "kind": "DotToken", "text": ".", "children": [] },
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": "WATCHLIST_STREAM_NAME",
                                                                    "children": []
                                                                  }
                                                                ]
                                                              },
                                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " kinesis",
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CloseBraceToken", "text": "\n        }", "children": [] }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        deps: [Log, ExecutionContext, ProtobufClient, Kinesis]",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        deps", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrayLiteralExpression",
                                        "text": " [Log, ExecutionContext, ProtobufClient, Kinesis]",
                                        "children": [
                                          { "kind": "OpenBracketToken", "text": " [", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "Log, ExecutionContext, ProtobufClient, Kinesis",
                                            "children": [
                                              { "kind": "Identifier", "text": "Log", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "Identifier", "text": " ExecutionContext", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "Identifier", "text": " ProtobufClient", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "Identifier", "text": " Kinesis", "children": [] }
                                            ]
                                          },
                                          { "kind": "CloseBracketToken", "text": "]", "children": [] }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                            ]
                          },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          {
                            "kind": "ObjectLiteralExpression",
                            "text": "\n    {\n        provide: SQLWatchlistRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLWatchlistRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    }",
                            "children": [
                              { "kind": "FirstPunctuation", "text": "\n    {", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "\n        provide: SQLWatchlistRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLWatchlistRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true",
                                "children": [
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        provide: SQLWatchlistRepo",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        provide", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      { "kind": "Identifier", "text": " SQLWatchlistRepo", "children": [] }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLWatchlistRepo(log, dataSource);\n        }",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        useFactory", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrowFunction",
                                        "text": " (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLWatchlistRepo(log, dataSource);\n        }",
                                        "children": [
                                          { "kind": "OpenParenToken", "text": " (", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "log: Log, host: string, name: string, user: string, password: string",
                                            "children": [
                                              {
                                                "kind": "Parameter",
                                                "text": "log: Log",
                                                "children": [
                                                  { "kind": "Identifier", "text": "log", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " Log",
                                                    "children": [
                                                      { "kind": "Identifier", "text": " Log", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " host: string",
                                                "children": [
                                                  { "kind": "Identifier", "text": " host", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  { "kind": "StringKeyword", "text": " string", "children": [] }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " name: string",
                                                "children": [
                                                  { "kind": "Identifier", "text": " name", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  { "kind": "StringKeyword", "text": " string", "children": [] }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " user: string",
                                                "children": [
                                                  { "kind": "Identifier", "text": " user", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  { "kind": "StringKeyword", "text": " string", "children": [] }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " password: string",
                                                "children": [
                                                  { "kind": "Identifier", "text": " password", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  { "kind": "StringKeyword", "text": " string", "children": [] }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] },
                                          { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
                                          {
                                            "kind": "Block",
                                            "text": " {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLWatchlistRepo(log, dataSource);\n        }",
                                            "children": [
                                              { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                              {
                                                "kind": "SyntaxList",
                                                "text": "\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLWatchlistRepo(log, dataSource);",
                                                "children": [
                                                  {
                                                    "kind": "ExpressionStatement",
                                                    "text": "\n            dataSource.dbHost = host;",
                                                    "children": [
                                                      {
                                                        "kind": "BinaryExpression",
                                                        "text": "\n            dataSource.dbHost = host",
                                                        "children": [
                                                          {
                                                            "kind": "PropertyAccessExpression",
                                                            "text": "\n            dataSource.dbHost",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "\n            dataSource",
                                                                "children": []
                                                              },
                                                              { "kind": "DotToken", "text": ".", "children": [] },
                                                              { "kind": "Identifier", "text": "dbHost", "children": [] }
                                                            ]
                                                          },
                                                          { "kind": "FirstAssignment", "text": " =", "children": [] },
                                                          { "kind": "Identifier", "text": " host", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  },
                                                  {
                                                    "kind": "ExpressionStatement",
                                                    "text": "\n            dataSource.dbName = name;",
                                                    "children": [
                                                      {
                                                        "kind": "BinaryExpression",
                                                        "text": "\n            dataSource.dbName = name",
                                                        "children": [
                                                          {
                                                            "kind": "PropertyAccessExpression",
                                                            "text": "\n            dataSource.dbName",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "\n            dataSource",
                                                                "children": []
                                                              },
                                                              { "kind": "DotToken", "text": ".", "children": [] },
                                                              { "kind": "Identifier", "text": "dbName", "children": [] }
                                                            ]
                                                          },
                                                          { "kind": "FirstAssignment", "text": " =", "children": [] },
                                                          { "kind": "Identifier", "text": " name", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  },
                                                  {
                                                    "kind": "ExpressionStatement",
                                                    "text": "\n            dataSource.dbUser = user;",
                                                    "children": [
                                                      {
                                                        "kind": "BinaryExpression",
                                                        "text": "\n            dataSource.dbUser = user",
                                                        "children": [
                                                          {
                                                            "kind": "PropertyAccessExpression",
                                                            "text": "\n            dataSource.dbUser",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "\n            dataSource",
                                                                "children": []
                                                              },
                                                              { "kind": "DotToken", "text": ".", "children": [] },
                                                              { "kind": "Identifier", "text": "dbUser", "children": [] }
                                                            ]
                                                          },
                                                          { "kind": "FirstAssignment", "text": " =", "children": [] },
                                                          { "kind": "Identifier", "text": " user", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  },
                                                  {
                                                    "kind": "ExpressionStatement",
                                                    "text": "\n            dataSource.dbPassword = password;",
                                                    "children": [
                                                      {
                                                        "kind": "BinaryExpression",
                                                        "text": "\n            dataSource.dbPassword = password",
                                                        "children": [
                                                          {
                                                            "kind": "PropertyAccessExpression",
                                                            "text": "\n            dataSource.dbPassword",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "\n            dataSource",
                                                                "children": []
                                                              },
                                                              { "kind": "DotToken", "text": ".", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "dbPassword",
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          { "kind": "FirstAssignment", "text": " =", "children": [] },
                                                          { "kind": "Identifier", "text": " password", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  },
                                                  {
                                                    "kind": "ReturnStatement",
                                                    "text": "\n            return new SQLWatchlistRepo(log, dataSource);",
                                                    "children": [
                                                      {
                                                        "kind": "ReturnKeyword",
                                                        "text": "\n            return",
                                                        "children": []
                                                      },
                                                      {
                                                        "kind": "NewExpression",
                                                        "text": " new SQLWatchlistRepo(log, dataSource)",
                                                        "children": [
                                                          { "kind": "NewKeyword", "text": " new", "children": [] },
                                                          {
                                                            "kind": "Identifier",
                                                            "text": " SQLWatchlistRepo",
                                                            "children": []
                                                          },
                                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                          {
                                                            "kind": "SyntaxList",
                                                            "text": "log, dataSource",
                                                            "children": [
                                                              { "kind": "Identifier", "text": "log", "children": [] },
                                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " dataSource",
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CloseBraceToken", "text": "\n        }", "children": [] }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD']",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        deps", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrayLiteralExpression",
                                        "text": " [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD']",
                                        "children": [
                                          { "kind": "OpenBracketToken", "text": " [", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'",
                                            "children": [
                                              { "kind": "Identifier", "text": "Log", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "StringLiteral", "text": " 'env.DB_HOST'", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "StringLiteral", "text": " 'env.DB_NAME'", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "StringLiteral", "text": " 'env.DB_USER'", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "StringLiteral", "text": " 'env.DB_PASSWORD'", "children": [] }
                                            ]
                                          },
                                          { "kind": "CloseBracketToken", "text": "]", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        isAsync: true",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        isAsync", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      { "kind": "TrueKeyword", "text": " true", "children": [] }
                                    ]
                                  }
                                ]
                              },
                              { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                            ]
                          },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          {
                            "kind": "ObjectLiteralExpression",
                            "text": "\n    {\n        provide: SQLNoteRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLNoteRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true\n    }",
                            "children": [
                              { "kind": "FirstPunctuation", "text": "\n    {", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "\n        provide: SQLNoteRepo,\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLNoteRepo(log, dataSource);\n        },\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'],\n        isAsync: true",
                                "children": [
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        provide: SQLNoteRepo",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        provide", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      { "kind": "Identifier", "text": " SQLNoteRepo", "children": [] }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        useFactory: (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLNoteRepo(log, dataSource);\n        }",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        useFactory", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrowFunction",
                                        "text": " (log: Log, host: string, name: string, user: string, password: string) => {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLNoteRepo(log, dataSource);\n        }",
                                        "children": [
                                          { "kind": "OpenParenToken", "text": " (", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "log: Log, host: string, name: string, user: string, password: string",
                                            "children": [
                                              {
                                                "kind": "Parameter",
                                                "text": "log: Log",
                                                "children": [
                                                  { "kind": "Identifier", "text": "log", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " Log",
                                                    "children": [
                                                      { "kind": "Identifier", "text": " Log", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " host: string",
                                                "children": [
                                                  { "kind": "Identifier", "text": " host", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  { "kind": "StringKeyword", "text": " string", "children": [] }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " name: string",
                                                "children": [
                                                  { "kind": "Identifier", "text": " name", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  { "kind": "StringKeyword", "text": " string", "children": [] }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " user: string",
                                                "children": [
                                                  { "kind": "Identifier", "text": " user", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  { "kind": "StringKeyword", "text": " string", "children": [] }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " password: string",
                                                "children": [
                                                  { "kind": "Identifier", "text": " password", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  { "kind": "StringKeyword", "text": " string", "children": [] }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] },
                                          { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
                                          {
                                            "kind": "Block",
                                            "text": " {\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLNoteRepo(log, dataSource);\n        }",
                                            "children": [
                                              { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                              {
                                                "kind": "SyntaxList",
                                                "text": "\n            dataSource.dbHost = host;\n            dataSource.dbName = name;\n            dataSource.dbUser = user;\n            dataSource.dbPassword = password;\n            return new SQLNoteRepo(log, dataSource);",
                                                "children": [
                                                  {
                                                    "kind": "ExpressionStatement",
                                                    "text": "\n            dataSource.dbHost = host;",
                                                    "children": [
                                                      {
                                                        "kind": "BinaryExpression",
                                                        "text": "\n            dataSource.dbHost = host",
                                                        "children": [
                                                          {
                                                            "kind": "PropertyAccessExpression",
                                                            "text": "\n            dataSource.dbHost",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "\n            dataSource",
                                                                "children": []
                                                              },
                                                              { "kind": "DotToken", "text": ".", "children": [] },
                                                              { "kind": "Identifier", "text": "dbHost", "children": [] }
                                                            ]
                                                          },
                                                          { "kind": "FirstAssignment", "text": " =", "children": [] },
                                                          { "kind": "Identifier", "text": " host", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  },
                                                  {
                                                    "kind": "ExpressionStatement",
                                                    "text": "\n            dataSource.dbName = name;",
                                                    "children": [
                                                      {
                                                        "kind": "BinaryExpression",
                                                        "text": "\n            dataSource.dbName = name",
                                                        "children": [
                                                          {
                                                            "kind": "PropertyAccessExpression",
                                                            "text": "\n            dataSource.dbName",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "\n            dataSource",
                                                                "children": []
                                                              },
                                                              { "kind": "DotToken", "text": ".", "children": [] },
                                                              { "kind": "Identifier", "text": "dbName", "children": [] }
                                                            ]
                                                          },
                                                          { "kind": "FirstAssignment", "text": " =", "children": [] },
                                                          { "kind": "Identifier", "text": " name", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  },
                                                  {
                                                    "kind": "ExpressionStatement",
                                                    "text": "\n            dataSource.dbUser = user;",
                                                    "children": [
                                                      {
                                                        "kind": "BinaryExpression",
                                                        "text": "\n            dataSource.dbUser = user",
                                                        "children": [
                                                          {
                                                            "kind": "PropertyAccessExpression",
                                                            "text": "\n            dataSource.dbUser",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "\n            dataSource",
                                                                "children": []
                                                              },
                                                              { "kind": "DotToken", "text": ".", "children": [] },
                                                              { "kind": "Identifier", "text": "dbUser", "children": [] }
                                                            ]
                                                          },
                                                          { "kind": "FirstAssignment", "text": " =", "children": [] },
                                                          { "kind": "Identifier", "text": " user", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  },
                                                  {
                                                    "kind": "ExpressionStatement",
                                                    "text": "\n            dataSource.dbPassword = password;",
                                                    "children": [
                                                      {
                                                        "kind": "BinaryExpression",
                                                        "text": "\n            dataSource.dbPassword = password",
                                                        "children": [
                                                          {
                                                            "kind": "PropertyAccessExpression",
                                                            "text": "\n            dataSource.dbPassword",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "\n            dataSource",
                                                                "children": []
                                                              },
                                                              { "kind": "DotToken", "text": ".", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "dbPassword",
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          { "kind": "FirstAssignment", "text": " =", "children": [] },
                                                          { "kind": "Identifier", "text": " password", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  },
                                                  {
                                                    "kind": "ReturnStatement",
                                                    "text": "\n            return new SQLNoteRepo(log, dataSource);",
                                                    "children": [
                                                      {
                                                        "kind": "ReturnKeyword",
                                                        "text": "\n            return",
                                                        "children": []
                                                      },
                                                      {
                                                        "kind": "NewExpression",
                                                        "text": " new SQLNoteRepo(log, dataSource)",
                                                        "children": [
                                                          { "kind": "NewKeyword", "text": " new", "children": [] },
                                                          {
                                                            "kind": "Identifier",
                                                            "text": " SQLNoteRepo",
                                                            "children": []
                                                          },
                                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                          {
                                                            "kind": "SyntaxList",
                                                            "text": "log, dataSource",
                                                            "children": [
                                                              { "kind": "Identifier", "text": "log", "children": [] },
                                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " dataSource",
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CloseBraceToken", "text": "\n        }", "children": [] }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        deps: [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD']",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        deps", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrayLiteralExpression",
                                        "text": " [Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD']",
                                        "children": [
                                          { "kind": "OpenBracketToken", "text": " [", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "Log, 'env.DB_HOST', 'env.DB_NAME', 'env.DB_USER', 'env.DB_PASSWORD'",
                                            "children": [
                                              { "kind": "Identifier", "text": "Log", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "StringLiteral", "text": " 'env.DB_HOST'", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "StringLiteral", "text": " 'env.DB_NAME'", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "StringLiteral", "text": " 'env.DB_USER'", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "StringLiteral", "text": " 'env.DB_PASSWORD'", "children": [] }
                                            ]
                                          },
                                          { "kind": "CloseBracketToken", "text": "]", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        isAsync: true",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        isAsync", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      { "kind": "TrueKeyword", "text": " true", "children": [] }
                                    ]
                                  }
                                ]
                              },
                              { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                            ]
                          },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          { "kind": "Identifier", "text": "\n    StreamController", "children": [] },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          { "kind": "Identifier", "text": "\n    CriteriaBuilderFactory", "children": [] },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          { "kind": "Identifier", "text": "\n    WatchListService", "children": [] },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          { "kind": "Identifier", "text": "\n    WatchListFacade", "children": [] },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          { "kind": "Identifier", "text": "\n    NoteService", "children": [] },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          { "kind": "Identifier", "text": "\n    NoteFacade", "children": [] },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          {
                            "kind": "ObjectLiteralExpression",
                            "text": "\n    {\n        provide: LambdaRepo,\n        useFactory: (log: Log, executionContext: ExecutionContext, lambda: Lambda, iotArn: string): LambdaRepo => {\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN;\n            return new LambdaRepo(log, executionContext, lambda, iotArn, recoArn);\n        },\n        deps: [Log, ExecutionContext, Lambda, 'env.IOT_SERVICE_LAMBDA_ARN']\n    }",
                            "children": [
                              { "kind": "FirstPunctuation", "text": "\n    {", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "\n        provide: LambdaRepo,\n        useFactory: (log: Log, executionContext: ExecutionContext, lambda: Lambda, iotArn: string): LambdaRepo => {\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN;\n            return new LambdaRepo(log, executionContext, lambda, iotArn, recoArn);\n        },\n        deps: [Log, ExecutionContext, Lambda, 'env.IOT_SERVICE_LAMBDA_ARN']",
                                "children": [
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        provide: LambdaRepo",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        provide", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      { "kind": "Identifier", "text": " LambdaRepo", "children": [] }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        useFactory: (log: Log, executionContext: ExecutionContext, lambda: Lambda, iotArn: string): LambdaRepo => {\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN;\n            return new LambdaRepo(log, executionContext, lambda, iotArn, recoArn);\n        }",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        useFactory", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrowFunction",
                                        "text": " (log: Log, executionContext: ExecutionContext, lambda: Lambda, iotArn: string): LambdaRepo => {\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN;\n            return new LambdaRepo(log, executionContext, lambda, iotArn, recoArn);\n        }",
                                        "children": [
                                          { "kind": "OpenParenToken", "text": " (", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "log: Log, executionContext: ExecutionContext, lambda: Lambda, iotArn: string",
                                            "children": [
                                              {
                                                "kind": "Parameter",
                                                "text": "log: Log",
                                                "children": [
                                                  { "kind": "Identifier", "text": "log", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " Log",
                                                    "children": [
                                                      { "kind": "Identifier", "text": " Log", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " executionContext: ExecutionContext",
                                                "children": [
                                                  { "kind": "Identifier", "text": " executionContext", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " ExecutionContext",
                                                    "children": [
                                                      {
                                                        "kind": "Identifier",
                                                        "text": " ExecutionContext",
                                                        "children": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " lambda: Lambda",
                                                "children": [
                                                  { "kind": "Identifier", "text": " lambda", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " Lambda",
                                                    "children": [
                                                      { "kind": "Identifier", "text": " Lambda", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "Parameter",
                                                "text": " iotArn: string",
                                                "children": [
                                                  { "kind": "Identifier", "text": " iotArn", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  { "kind": "StringKeyword", "text": " string", "children": [] }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] },
                                          { "kind": "ColonToken", "text": ":", "children": [] },
                                          {
                                            "kind": "TypeReference",
                                            "text": " LambdaRepo",
                                            "children": [
                                              { "kind": "Identifier", "text": " LambdaRepo", "children": [] }
                                            ]
                                          },
                                          { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
                                          {
                                            "kind": "Block",
                                            "text": " {\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN;\n            return new LambdaRepo(log, executionContext, lambda, iotArn, recoArn);\n        }",
                                            "children": [
                                              { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                              {
                                                "kind": "SyntaxList",
                                                "text": "\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN;\n            return new LambdaRepo(log, executionContext, lambda, iotArn, recoArn);",
                                                "children": [
                                                  {
                                                    "kind": "FirstStatement",
                                                    "text": "\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN;",
                                                    "children": [
                                                      {
                                                        "kind": "VariableDeclarationList",
                                                        "text": "\n            const recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN",
                                                        "children": [
                                                          {
                                                            "kind": "ConstKeyword",
                                                            "text": "\n            const",
                                                            "children": []
                                                          },
                                                          {
                                                            "kind": "SyntaxList",
                                                            "text": " recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN",
                                                            "children": [
                                                              {
                                                                "kind": "VariableDeclaration",
                                                                "text": " recoArn = process.env.GET_RECOMMENDATIONS_LAMBDA_ARN",
                                                                "children": [
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": " recoArn",
                                                                    "children": []
                                                                  },
                                                                  {
                                                                    "kind": "FirstAssignment",
                                                                    "text": " =",
                                                                    "children": []
                                                                  },
                                                                  {
                                                                    "kind": "PropertyAccessExpression",
                                                                    "text": " process.env.GET_RECOMMENDATIONS_LAMBDA_ARN",
                                                                    "children": [
                                                                      {
                                                                        "kind": "PropertyAccessExpression",
                                                                        "text": " process.env",
                                                                        "children": [
                                                                          {
                                                                            "kind": "Identifier",
                                                                            "text": " process",
                                                                            "children": []
                                                                          },
                                                                          {
                                                                            "kind": "DotToken",
                                                                            "text": ".",
                                                                            "children": []
                                                                          },
                                                                          {
                                                                            "kind": "Identifier",
                                                                            "text": "env",
                                                                            "children": []
                                                                          }
                                                                        ]
                                                                      },
                                                                      {
                                                                        "kind": "DotToken",
                                                                        "text": ".",
                                                                        "children": []
                                                                      },
                                                                      {
                                                                        "kind": "Identifier",
                                                                        "text": "GET_RECOMMENDATIONS_LAMBDA_ARN",
                                                                        "children": []
                                                                      }
                                                                    ]
                                                                  }
                                                                ]
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  },
                                                  {
                                                    "kind": "ReturnStatement",
                                                    "text": "\n            return new LambdaRepo(log, executionContext, lambda, iotArn, recoArn);",
                                                    "children": [
                                                      {
                                                        "kind": "ReturnKeyword",
                                                        "text": "\n            return",
                                                        "children": []
                                                      },
                                                      {
                                                        "kind": "NewExpression",
                                                        "text": " new LambdaRepo(log, executionContext, lambda, iotArn, recoArn)",
                                                        "children": [
                                                          { "kind": "NewKeyword", "text": " new", "children": [] },
                                                          {
                                                            "kind": "Identifier",
                                                            "text": " LambdaRepo",
                                                            "children": []
                                                          },
                                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                          {
                                                            "kind": "SyntaxList",
                                                            "text": "log, executionContext, lambda, iotArn, recoArn",
                                                            "children": [
                                                              { "kind": "Identifier", "text": "log", "children": [] },
                                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " executionContext",
                                                                "children": []
                                                              },
                                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " lambda",
                                                                "children": []
                                                              },
                                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " iotArn",
                                                                "children": []
                                                              },
                                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " recoArn",
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CloseBraceToken", "text": "\n        }", "children": [] }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  {
                                    "kind": "PropertyAssignment",
                                    "text": "\n        deps: [Log, ExecutionContext, Lambda, 'env.IOT_SERVICE_LAMBDA_ARN']",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n        deps", "children": [] },
                                      { "kind": "ColonToken", "text": ":", "children": [] },
                                      {
                                        "kind": "ArrayLiteralExpression",
                                        "text": " [Log, ExecutionContext, Lambda, 'env.IOT_SERVICE_LAMBDA_ARN']",
                                        "children": [
                                          { "kind": "OpenBracketToken", "text": " [", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "Log, ExecutionContext, Lambda, 'env.IOT_SERVICE_LAMBDA_ARN'",
                                            "children": [
                                              { "kind": "Identifier", "text": "Log", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "Identifier", "text": " ExecutionContext", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "Identifier", "text": " Lambda", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "StringLiteral",
                                                "text": " 'env.IOT_SERVICE_LAMBDA_ARN'",
                                                "children": []
                                              }
                                            ]
                                          },
                                          { "kind": "CloseBracketToken", "text": "]", "children": [] }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                            ]
                          },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          { "kind": "Identifier", "text": "\n    IoTService", "children": [] },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          { "kind": "Identifier", "text": "\n    ApiServiceRepo", "children": [] },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          { "kind": "Identifier", "text": "\n    ApiService", "children": [] },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          { "kind": "Identifier", "text": "\n    ClassicService", "children": [] },
                          { "kind": "CommaToken", "text": ",", "children": [] },
                          { "kind": "Identifier", "text": "\n    ClassicFacade", "children": [] },
                          { "kind": "CommaToken", "text": ",", "children": [] }
                        ]
                      },
                      { "kind": "CloseBracketToken", "text": "\n]", "children": [] }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\n// Http handlers\nexports.addVehicleToWatchlist = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.addWatchlistVehicles)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\n// Http handlers\nexports.addVehicleToWatchlist = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.addWatchlistVehicles)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\n// Http handlers\nexports.addVehicleToWatchlist",
            "children": [
              { "kind": "Identifier", "text": "\n\n// Http handlers\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "addVehicleToWatchlist", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.addWatchlistVehicles)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.addWatchlistVehicles)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.addWatchlistVehicles)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.addWatchlistVehicles)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.addWatchlistVehicles)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.addWatchlistVehicles)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    HttpRuntime.createHttpHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    HttpRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHttpHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.addWatchlistVehicles",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " WatchListController.addWatchlistVehicles",
                                        "children": [
                                          { "kind": "Identifier", "text": " WatchListController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          { "kind": "Identifier", "text": "addWatchlistVehicles", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\nexports.getWatchlistVehicles = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getWatchlistVehicles)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\nexports.getWatchlistVehicles = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getWatchlistVehicles)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\nexports.getWatchlistVehicles",
            "children": [
              { "kind": "Identifier", "text": "\n\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "getWatchlistVehicles", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getWatchlistVehicles)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getWatchlistVehicles)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getWatchlistVehicles)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getWatchlistVehicles)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getWatchlistVehicles)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getWatchlistVehicles)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    HttpRuntime.createHttpHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    HttpRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHttpHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getWatchlistVehicles",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " WatchListController.getWatchlistVehicles",
                                        "children": [
                                          { "kind": "Identifier", "text": " WatchListController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          { "kind": "Identifier", "text": "getWatchlistVehicles", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\nexports.removeAllVehicles = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeAllWatchlistVehicles)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\nexports.removeAllVehicles = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeAllWatchlistVehicles)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\nexports.removeAllVehicles",
            "children": [
              { "kind": "Identifier", "text": "\n\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "removeAllVehicles", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeAllWatchlistVehicles)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeAllWatchlistVehicles)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeAllWatchlistVehicles)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeAllWatchlistVehicles)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeAllWatchlistVehicles)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeAllWatchlistVehicles)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    HttpRuntime.createHttpHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    HttpRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHttpHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeAllWatchlistVehicles",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " WatchListController.removeAllWatchlistVehicles",
                                        "children": [
                                          { "kind": "Identifier", "text": " WatchListController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          { "kind": "Identifier", "text": "removeAllWatchlistVehicles", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\nexports.getNextPreviousWatchlistVehicles = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getNextPreviousWatchlistVehicles)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\nexports.getNextPreviousWatchlistVehicles = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getNextPreviousWatchlistVehicles)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\nexports.getNextPreviousWatchlistVehicles",
            "children": [
              { "kind": "Identifier", "text": "\n\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "getNextPreviousWatchlistVehicles", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getNextPreviousWatchlistVehicles)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getNextPreviousWatchlistVehicles)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getNextPreviousWatchlistVehicles)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getNextPreviousWatchlistVehicles)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getNextPreviousWatchlistVehicles)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getNextPreviousWatchlistVehicles)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    HttpRuntime.createHttpHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    HttpRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHttpHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getNextPreviousWatchlistVehicles",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " WatchListController.getNextPreviousWatchlistVehicles",
                                        "children": [
                                          { "kind": "Identifier", "text": " WatchListController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          {
                                            "kind": "Identifier",
                                            "text": "getNextPreviousWatchlistVehicles",
                                            "children": []
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\nexports.removeWatchlistVehicle = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeWatchlistVehicle)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\nexports.removeWatchlistVehicle = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeWatchlistVehicle)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\nexports.removeWatchlistVehicle",
            "children": [
              { "kind": "Identifier", "text": "\n\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "removeWatchlistVehicle", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeWatchlistVehicle)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeWatchlistVehicle)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeWatchlistVehicle)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeWatchlistVehicle)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeWatchlistVehicle)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeWatchlistVehicle)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    HttpRuntime.createHttpHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    HttpRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHttpHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.removeWatchlistVehicle",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " WatchListController.removeWatchlistVehicle",
                                        "children": [
                                          { "kind": "Identifier", "text": " WatchListController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          { "kind": "Identifier", "text": "removeWatchlistVehicle", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\nexports.isVehicleInWatchlist = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.isVehicleInWatchlist)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\nexports.isVehicleInWatchlist = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.isVehicleInWatchlist)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\nexports.isVehicleInWatchlist",
            "children": [
              { "kind": "Identifier", "text": "\n\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "isVehicleInWatchlist", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.isVehicleInWatchlist)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.isVehicleInWatchlist)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.isVehicleInWatchlist)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.isVehicleInWatchlist)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.isVehicleInWatchlist)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.isVehicleInWatchlist)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    HttpRuntime.createHttpHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    HttpRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHttpHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.isVehicleInWatchlist",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " WatchListController.isVehicleInWatchlist",
                                        "children": [
                                          { "kind": "Identifier", "text": " WatchListController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          { "kind": "Identifier", "text": "isVehicleInWatchlist", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\nexports.vehiclesInWatchlist = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getVehicleIdsInWatchlist)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\nexports.vehiclesInWatchlist = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getVehicleIdsInWatchlist)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\nexports.vehiclesInWatchlist",
            "children": [
              { "kind": "Identifier", "text": "\n\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "vehiclesInWatchlist", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getVehicleIdsInWatchlist)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getVehicleIdsInWatchlist)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getVehicleIdsInWatchlist)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getVehicleIdsInWatchlist)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getVehicleIdsInWatchlist)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getVehicleIdsInWatchlist)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    HttpRuntime.createHttpHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    HttpRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHttpHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getVehicleIdsInWatchlist",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " WatchListController.getVehicleIdsInWatchlist",
                                        "children": [
                                          { "kind": "Identifier", "text": " WatchListController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          { "kind": "Identifier", "text": "getVehicleIdsInWatchlist", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\nexports.getSimulcastVehicles = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getSimulcastVehicles)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\nexports.getSimulcastVehicles = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getSimulcastVehicles)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\nexports.getSimulcastVehicles",
            "children": [
              { "kind": "Identifier", "text": "\n\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "getSimulcastVehicles", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getSimulcastVehicles)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getSimulcastVehicles)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getSimulcastVehicles)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getSimulcastVehicles)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getSimulcastVehicles)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getSimulcastVehicles)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    HttpRuntime.createHttpHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    HttpRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHttpHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getSimulcastVehicles",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " WatchListController.getSimulcastVehicles",
                                        "children": [
                                          { "kind": "Identifier", "text": " WatchListController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          { "kind": "Identifier", "text": "getSimulcastVehicles", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\nexports.getRecommendations = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getRecommendations)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\nexports.getRecommendations = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getRecommendations)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\nexports.getRecommendations",
            "children": [
              { "kind": "Identifier", "text": "\n\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "getRecommendations", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getRecommendations)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getRecommendations)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getRecommendations)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getRecommendations)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getRecommendations)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getRecommendations)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    HttpRuntime.createHttpHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    HttpRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHttpHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, WatchListController.getRecommendations",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " WatchListController.getRecommendations",
                                        "children": [
                                          { "kind": "Identifier", "text": " WatchListController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          { "kind": "Identifier", "text": "getRecommendations", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\nexports.getNotes = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.getNotes)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\nexports.getNotes = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.getNotes)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\nexports.getNotes",
            "children": [
              { "kind": "Identifier", "text": "\n\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "getNotes", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.getNotes)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.getNotes)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.getNotes)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.getNotes)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.getNotes)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.getNotes)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    HttpRuntime.createHttpHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    HttpRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHttpHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.getNotes",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " NoteController.getNotes",
                                        "children": [
                                          { "kind": "Identifier", "text": " NoteController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          { "kind": "Identifier", "text": "getNotes", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\nexports.addNote = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.addNote)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\nexports.addNote = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.addNote)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\nexports.addNote",
            "children": [
              { "kind": "Identifier", "text": "\n\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "addNote", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.addNote)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.addNote)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.addNote)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.addNote)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.addNote)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.addNote)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    HttpRuntime.createHttpHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    HttpRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHttpHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.addNote",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " NoteController.addNote",
                                        "children": [
                                          { "kind": "Identifier", "text": " NoteController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          { "kind": "Identifier", "text": "addNote", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\nexports.removeNote = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.removeNote)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\nexports.removeNote = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.removeNote)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\nexports.removeNote",
            "children": [
              { "kind": "Identifier", "text": "\n\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "removeNote", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.removeNote)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.removeNote)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.removeNote)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.removeNote)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.removeNote)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.removeNote)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    HttpRuntime.createHttpHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    HttpRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHttpHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.removeNote",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " NoteController.removeNote",
                                        "children": [
                                          { "kind": "Identifier", "text": " NoteController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          { "kind": "Identifier", "text": "removeNote", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\nexports.updateNote = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.updateNote)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\nexports.updateNote = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.updateNote)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\nexports.updateNote",
            "children": [
              { "kind": "Identifier", "text": "\n\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "updateNote", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.updateNote)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.updateNote)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.updateNote)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.updateNote)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.updateNote)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    HttpRuntime.createHttpHandler(CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.updateNote)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    HttpRuntime.createHttpHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    HttpRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHttpHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, NoteController.updateNote",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " NoteController.updateNote",
                                        "children": [
                                          { "kind": "Identifier", "text": " NoteController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          { "kind": "Identifier", "text": "updateNote", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\n// Stream handlers\nexports.processEvents = (event: any, context: Context, callback: Callback) => {\n    StreamRuntime.createStreamHandler(CONTEXT_OPTIONS, APP_PROVIDERS, StreamController.processEvents)(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\n// Stream handlers\nexports.processEvents = (event: any, context: Context, callback: Callback) => {\n    StreamRuntime.createStreamHandler(CONTEXT_OPTIONS, APP_PROVIDERS, StreamController.processEvents)(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\n// Stream handlers\nexports.processEvents",
            "children": [
              { "kind": "Identifier", "text": "\n\n// Stream handlers\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "processEvents", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    StreamRuntime.createStreamHandler(CONTEXT_OPTIONS, APP_PROVIDERS, StreamController.processEvents)(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    StreamRuntime.createStreamHandler(CONTEXT_OPTIONS, APP_PROVIDERS, StreamController.processEvents)(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    StreamRuntime.createStreamHandler(CONTEXT_OPTIONS, APP_PROVIDERS, StreamController.processEvents)(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    StreamRuntime.createStreamHandler(CONTEXT_OPTIONS, APP_PROVIDERS, StreamController.processEvents)(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    StreamRuntime.createStreamHandler(CONTEXT_OPTIONS, APP_PROVIDERS, StreamController.processEvents)(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    StreamRuntime.createStreamHandler(CONTEXT_OPTIONS, APP_PROVIDERS, StreamController.processEvents)",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    StreamRuntime.createStreamHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    StreamRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createStreamHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "CONTEXT_OPTIONS, APP_PROVIDERS, StreamController.processEvents",
                                    "children": [
                                      { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      { "kind": "Identifier", "text": " APP_PROVIDERS", "children": [] },
                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                      {
                                        "kind": "PropertyAccessExpression",
                                        "text": " StreamController.processEvents",
                                        "children": [
                                          { "kind": "Identifier", "text": " StreamController", "children": [] },
                                          { "kind": "DotToken", "text": ".", "children": [] },
                                          { "kind": "Identifier", "text": "processEvents", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\n\n// This is the initial version, we will clean the code up a bit in next iteration.\nexports._healthcheck = async (event: any, context: Context, callback: Callback) => {\n    const rdsServiceStatus = {\n        check: 'rdsConnection',\n        status: CoreConstants.NW_MONITORING_STATUS_UNKNOWN\n    };\n    // TODO: have to do this atm, as this is too deeply coupled with the sdk code\n    // Ideally all these can be updated to use `credstash`, however, this requires all other sdk component to comes onboard\n    // can't just use `credstash` in  one place and other `vault`-liked lambda in other\n    const c = new RuntimeContextImpl(CONTEXT_OPTIONS, event, context, callback);\n    const log = new Log(new CoreContextImpl(c, event));\n\n    try {\n        c.initialize(log);\n        await c.loadSecrets().toPromise();\n        const client = DbUtils.createClient();\n        try {\n            await client.authenticate();\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_UP;\n        } catch (e) {\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN;\n        } finally {\n            client.close();\n        }\n    } catch (e) {\n        log.error('Unable to execute health check', e);\n    } finally {\n        HealthCheck.reportHealthStatus(rdsServiceStatus, c);\n        callback(null, HealthCheck.generateHealthResponse(\n            context.functionName,\n            context.functionVersion,\n            rdsServiceStatus)\n        );\n    }\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\n\n// This is the initial version, we will clean the code up a bit in next iteration.\nexports._healthcheck = async (event: any, context: Context, callback: Callback) => {\n    const rdsServiceStatus = {\n        check: 'rdsConnection',\n        status: CoreConstants.NW_MONITORING_STATUS_UNKNOWN\n    };\n    // TODO: have to do this atm, as this is too deeply coupled with the sdk code\n    // Ideally all these can be updated to use `credstash`, however, this requires all other sdk component to comes onboard\n    // can't just use `credstash` in  one place and other `vault`-liked lambda in other\n    const c = new RuntimeContextImpl(CONTEXT_OPTIONS, event, context, callback);\n    const log = new Log(new CoreContextImpl(c, event));\n\n    try {\n        c.initialize(log);\n        await c.loadSecrets().toPromise();\n        const client = DbUtils.createClient();\n        try {\n            await client.authenticate();\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_UP;\n        } catch (e) {\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN;\n        } finally {\n            client.close();\n        }\n    } catch (e) {\n        log.error('Unable to execute health check', e);\n    } finally {\n        HealthCheck.reportHealthStatus(rdsServiceStatus, c);\n        callback(null, HealthCheck.generateHealthResponse(\n            context.functionName,\n            context.functionVersion,\n            rdsServiceStatus)\n        );\n    }\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\n\n// This is the initial version, we will clean the code up a bit in next iteration.\nexports._healthcheck",
            "children": [
              {
                "kind": "Identifier",
                "text": "\n\n// This is the initial version, we will clean the code up a bit in next iteration.\nexports",
                "children": []
              },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "_healthcheck", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " async (event: any, context: Context, callback: Callback) => {\n    const rdsServiceStatus = {\n        check: 'rdsConnection',\n        status: CoreConstants.NW_MONITORING_STATUS_UNKNOWN\n    };\n    // TODO: have to do this atm, as this is too deeply coupled with the sdk code\n    // Ideally all these can be updated to use `credstash`, however, this requires all other sdk component to comes onboard\n    // can't just use `credstash` in  one place and other `vault`-liked lambda in other\n    const c = new RuntimeContextImpl(CONTEXT_OPTIONS, event, context, callback);\n    const log = new Log(new CoreContextImpl(c, event));\n\n    try {\n        c.initialize(log);\n        await c.loadSecrets().toPromise();\n        const client = DbUtils.createClient();\n        try {\n            await client.authenticate();\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_UP;\n        } catch (e) {\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN;\n        } finally {\n            client.close();\n        }\n    } catch (e) {\n        log.error('Unable to execute health check', e);\n    } finally {\n        HealthCheck.reportHealthStatus(rdsServiceStatus, c);\n        callback(null, HealthCheck.generateHealthResponse(\n            context.functionName,\n            context.functionVersion,\n            rdsServiceStatus)\n        );\n    }\n}",
            "children": [
              {
                "kind": "SyntaxList",
                "text": " async",
                "children": [{ "kind": "AsyncKeyword", "text": " async", "children": [] }]
              },
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    const rdsServiceStatus = {\n        check: 'rdsConnection',\n        status: CoreConstants.NW_MONITORING_STATUS_UNKNOWN\n    };\n    // TODO: have to do this atm, as this is too deeply coupled with the sdk code\n    // Ideally all these can be updated to use `credstash`, however, this requires all other sdk component to comes onboard\n    // can't just use `credstash` in  one place and other `vault`-liked lambda in other\n    const c = new RuntimeContextImpl(CONTEXT_OPTIONS, event, context, callback);\n    const log = new Log(new CoreContextImpl(c, event));\n\n    try {\n        c.initialize(log);\n        await c.loadSecrets().toPromise();\n        const client = DbUtils.createClient();\n        try {\n            await client.authenticate();\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_UP;\n        } catch (e) {\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN;\n        } finally {\n            client.close();\n        }\n    } catch (e) {\n        log.error('Unable to execute health check', e);\n    } finally {\n        HealthCheck.reportHealthStatus(rdsServiceStatus, c);\n        callback(null, HealthCheck.generateHealthResponse(\n            context.functionName,\n            context.functionVersion,\n            rdsServiceStatus)\n        );\n    }\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    const rdsServiceStatus = {\n        check: 'rdsConnection',\n        status: CoreConstants.NW_MONITORING_STATUS_UNKNOWN\n    };\n    // TODO: have to do this atm, as this is too deeply coupled with the sdk code\n    // Ideally all these can be updated to use `credstash`, however, this requires all other sdk component to comes onboard\n    // can't just use `credstash` in  one place and other `vault`-liked lambda in other\n    const c = new RuntimeContextImpl(CONTEXT_OPTIONS, event, context, callback);\n    const log = new Log(new CoreContextImpl(c, event));\n\n    try {\n        c.initialize(log);\n        await c.loadSecrets().toPromise();\n        const client = DbUtils.createClient();\n        try {\n            await client.authenticate();\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_UP;\n        } catch (e) {\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN;\n        } finally {\n            client.close();\n        }\n    } catch (e) {\n        log.error('Unable to execute health check', e);\n    } finally {\n        HealthCheck.reportHealthStatus(rdsServiceStatus, c);\n        callback(null, HealthCheck.generateHealthResponse(\n            context.functionName,\n            context.functionVersion,\n            rdsServiceStatus)\n        );\n    }",
                    "children": [
                      {
                        "kind": "FirstStatement",
                        "text": "\n    const rdsServiceStatus = {\n        check: 'rdsConnection',\n        status: CoreConstants.NW_MONITORING_STATUS_UNKNOWN\n    };",
                        "children": [
                          {
                            "kind": "VariableDeclarationList",
                            "text": "\n    const rdsServiceStatus = {\n        check: 'rdsConnection',\n        status: CoreConstants.NW_MONITORING_STATUS_UNKNOWN\n    }",
                            "children": [
                              { "kind": "ConstKeyword", "text": "\n    const", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": " rdsServiceStatus = {\n        check: 'rdsConnection',\n        status: CoreConstants.NW_MONITORING_STATUS_UNKNOWN\n    }",
                                "children": [
                                  {
                                    "kind": "VariableDeclaration",
                                    "text": " rdsServiceStatus = {\n        check: 'rdsConnection',\n        status: CoreConstants.NW_MONITORING_STATUS_UNKNOWN\n    }",
                                    "children": [
                                      { "kind": "Identifier", "text": " rdsServiceStatus", "children": [] },
                                      { "kind": "FirstAssignment", "text": " =", "children": [] },
                                      {
                                        "kind": "ObjectLiteralExpression",
                                        "text": " {\n        check: 'rdsConnection',\n        status: CoreConstants.NW_MONITORING_STATUS_UNKNOWN\n    }",
                                        "children": [
                                          { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "\n        check: 'rdsConnection',\n        status: CoreConstants.NW_MONITORING_STATUS_UNKNOWN",
                                            "children": [
                                              {
                                                "kind": "PropertyAssignment",
                                                "text": "\n        check: 'rdsConnection'",
                                                "children": [
                                                  { "kind": "Identifier", "text": "\n        check", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "StringLiteral",
                                                    "text": " 'rdsConnection'",
                                                    "children": []
                                                  }
                                                ]
                                              },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "PropertyAssignment",
                                                "text": "\n        status: CoreConstants.NW_MONITORING_STATUS_UNKNOWN",
                                                "children": [
                                                  { "kind": "Identifier", "text": "\n        status", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "PropertyAccessExpression",
                                                    "text": " CoreConstants.NW_MONITORING_STATUS_UNKNOWN",
                                                    "children": [
                                                      {
                                                        "kind": "Identifier",
                                                        "text": " CoreConstants",
                                                        "children": []
                                                      },
                                                      { "kind": "DotToken", "text": ".", "children": [] },
                                                      {
                                                        "kind": "Identifier",
                                                        "text": "NW_MONITORING_STATUS_UNKNOWN",
                                                        "children": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "FirstStatement",
                        "text": "\n    // TODO: have to do this atm, as this is too deeply coupled with the sdk code\n    // Ideally all these can be updated to use `credstash`, however, this requires all other sdk component to comes onboard\n    // can't just use `credstash` in  one place and other `vault`-liked lambda in other\n    const c = new RuntimeContextImpl(CONTEXT_OPTIONS, event, context, callback);",
                        "children": [
                          {
                            "kind": "VariableDeclarationList",
                            "text": "\n    // TODO: have to do this atm, as this is too deeply coupled with the sdk code\n    // Ideally all these can be updated to use `credstash`, however, this requires all other sdk component to comes onboard\n    // can't just use `credstash` in  one place and other `vault`-liked lambda in other\n    const c = new RuntimeContextImpl(CONTEXT_OPTIONS, event, context, callback)",
                            "children": [
                              {
                                "kind": "ConstKeyword",
                                "text": "\n    // TODO: have to do this atm, as this is too deeply coupled with the sdk code\n    // Ideally all these can be updated to use `credstash`, however, this requires all other sdk component to comes onboard\n    // can't just use `credstash` in  one place and other `vault`-liked lambda in other\n    const",
                                "children": []
                              },
                              {
                                "kind": "SyntaxList",
                                "text": " c = new RuntimeContextImpl(CONTEXT_OPTIONS, event, context, callback)",
                                "children": [
                                  {
                                    "kind": "VariableDeclaration",
                                    "text": " c = new RuntimeContextImpl(CONTEXT_OPTIONS, event, context, callback)",
                                    "children": [
                                      { "kind": "Identifier", "text": " c", "children": [] },
                                      { "kind": "FirstAssignment", "text": " =", "children": [] },
                                      {
                                        "kind": "NewExpression",
                                        "text": " new RuntimeContextImpl(CONTEXT_OPTIONS, event, context, callback)",
                                        "children": [
                                          { "kind": "NewKeyword", "text": " new", "children": [] },
                                          { "kind": "Identifier", "text": " RuntimeContextImpl", "children": [] },
                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "CONTEXT_OPTIONS, event, context, callback",
                                            "children": [
                                              { "kind": "Identifier", "text": "CONTEXT_OPTIONS", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "Identifier", "text": " event", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "Identifier", "text": " context", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "Identifier", "text": " callback", "children": [] }
                                            ]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "FirstStatement",
                        "text": "\n    const log = new Log(new CoreContextImpl(c, event));",
                        "children": [
                          {
                            "kind": "VariableDeclarationList",
                            "text": "\n    const log = new Log(new CoreContextImpl(c, event))",
                            "children": [
                              { "kind": "ConstKeyword", "text": "\n    const", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": " log = new Log(new CoreContextImpl(c, event))",
                                "children": [
                                  {
                                    "kind": "VariableDeclaration",
                                    "text": " log = new Log(new CoreContextImpl(c, event))",
                                    "children": [
                                      { "kind": "Identifier", "text": " log", "children": [] },
                                      { "kind": "FirstAssignment", "text": " =", "children": [] },
                                      {
                                        "kind": "NewExpression",
                                        "text": " new Log(new CoreContextImpl(c, event))",
                                        "children": [
                                          { "kind": "NewKeyword", "text": " new", "children": [] },
                                          { "kind": "Identifier", "text": " Log", "children": [] },
                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "new CoreContextImpl(c, event)",
                                            "children": [
                                              {
                                                "kind": "NewExpression",
                                                "text": "new CoreContextImpl(c, event)",
                                                "children": [
                                                  { "kind": "NewKeyword", "text": "new", "children": [] },
                                                  { "kind": "Identifier", "text": " CoreContextImpl", "children": [] },
                                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                  {
                                                    "kind": "SyntaxList",
                                                    "text": "c, event",
                                                    "children": [
                                                      { "kind": "Identifier", "text": "c", "children": [] },
                                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                                      { "kind": "Identifier", "text": " event", "children": [] }
                                                    ]
                                                  },
                                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "TryStatement",
                        "text": "\n\n    try {\n        c.initialize(log);\n        await c.loadSecrets().toPromise();\n        const client = DbUtils.createClient();\n        try {\n            await client.authenticate();\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_UP;\n        } catch (e) {\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN;\n        } finally {\n            client.close();\n        }\n    } catch (e) {\n        log.error('Unable to execute health check', e);\n    } finally {\n        HealthCheck.reportHealthStatus(rdsServiceStatus, c);\n        callback(null, HealthCheck.generateHealthResponse(\n            context.functionName,\n            context.functionVersion,\n            rdsServiceStatus)\n        );\n    }",
                        "children": [
                          { "kind": "TryKeyword", "text": "\n\n    try", "children": [] },
                          {
                            "kind": "Block",
                            "text": " {\n        c.initialize(log);\n        await c.loadSecrets().toPromise();\n        const client = DbUtils.createClient();\n        try {\n            await client.authenticate();\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_UP;\n        } catch (e) {\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN;\n        } finally {\n            client.close();\n        }\n    }",
                            "children": [
                              { "kind": "FirstPunctuation", "text": " {", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "\n        c.initialize(log);\n        await c.loadSecrets().toPromise();\n        const client = DbUtils.createClient();\n        try {\n            await client.authenticate();\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_UP;\n        } catch (e) {\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN;\n        } finally {\n            client.close();\n        }",
                                "children": [
                                  {
                                    "kind": "ExpressionStatement",
                                    "text": "\n        c.initialize(log);",
                                    "children": [
                                      {
                                        "kind": "CallExpression",
                                        "text": "\n        c.initialize(log)",
                                        "children": [
                                          {
                                            "kind": "PropertyAccessExpression",
                                            "text": "\n        c.initialize",
                                            "children": [
                                              { "kind": "Identifier", "text": "\n        c", "children": [] },
                                              { "kind": "DotToken", "text": ".", "children": [] },
                                              { "kind": "Identifier", "text": "initialize", "children": [] }
                                            ]
                                          },
                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "log",
                                            "children": [{ "kind": "Identifier", "text": "log", "children": [] }]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] }
                                        ]
                                      },
                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                    ]
                                  },
                                  {
                                    "kind": "ExpressionStatement",
                                    "text": "\n        await c.loadSecrets().toPromise();",
                                    "children": [
                                      {
                                        "kind": "AwaitExpression",
                                        "text": "\n        await c.loadSecrets().toPromise()",
                                        "children": [
                                          { "kind": "AwaitKeyword", "text": "\n        await", "children": [] },
                                          {
                                            "kind": "CallExpression",
                                            "text": " c.loadSecrets().toPromise()",
                                            "children": [
                                              {
                                                "kind": "PropertyAccessExpression",
                                                "text": " c.loadSecrets().toPromise",
                                                "children": [
                                                  {
                                                    "kind": "CallExpression",
                                                    "text": " c.loadSecrets()",
                                                    "children": [
                                                      {
                                                        "kind": "PropertyAccessExpression",
                                                        "text": " c.loadSecrets",
                                                        "children": [
                                                          { "kind": "Identifier", "text": " c", "children": [] },
                                                          { "kind": "DotToken", "text": ".", "children": [] },
                                                          {
                                                            "kind": "Identifier",
                                                            "text": "loadSecrets",
                                                            "children": []
                                                          }
                                                        ]
                                                      },
                                                      { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                      { "kind": "SyntaxList", "text": "", "children": [] },
                                                      { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                    ]
                                                  },
                                                  { "kind": "DotToken", "text": ".", "children": [] },
                                                  { "kind": "Identifier", "text": "toPromise", "children": [] }
                                                ]
                                              },
                                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                                              { "kind": "SyntaxList", "text": "", "children": [] },
                                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                                            ]
                                          }
                                        ]
                                      },
                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                    ]
                                  },
                                  {
                                    "kind": "FirstStatement",
                                    "text": "\n        const client = DbUtils.createClient();",
                                    "children": [
                                      {
                                        "kind": "VariableDeclarationList",
                                        "text": "\n        const client = DbUtils.createClient()",
                                        "children": [
                                          { "kind": "ConstKeyword", "text": "\n        const", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": " client = DbUtils.createClient()",
                                            "children": [
                                              {
                                                "kind": "VariableDeclaration",
                                                "text": " client = DbUtils.createClient()",
                                                "children": [
                                                  { "kind": "Identifier", "text": " client", "children": [] },
                                                  { "kind": "FirstAssignment", "text": " =", "children": [] },
                                                  {
                                                    "kind": "CallExpression",
                                                    "text": " DbUtils.createClient()",
                                                    "children": [
                                                      {
                                                        "kind": "PropertyAccessExpression",
                                                        "text": " DbUtils.createClient",
                                                        "children": [
                                                          { "kind": "Identifier", "text": " DbUtils", "children": [] },
                                                          { "kind": "DotToken", "text": ".", "children": [] },
                                                          {
                                                            "kind": "Identifier",
                                                            "text": "createClient",
                                                            "children": []
                                                          }
                                                        ]
                                                      },
                                                      { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                      { "kind": "SyntaxList", "text": "", "children": [] },
                                                      { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                    ]
                                  },
                                  {
                                    "kind": "TryStatement",
                                    "text": "\n        try {\n            await client.authenticate();\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_UP;\n        } catch (e) {\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN;\n        } finally {\n            client.close();\n        }",
                                    "children": [
                                      { "kind": "TryKeyword", "text": "\n        try", "children": [] },
                                      {
                                        "kind": "Block",
                                        "text": " {\n            await client.authenticate();\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_UP;\n        }",
                                        "children": [
                                          { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "\n            await client.authenticate();\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_UP;",
                                            "children": [
                                              {
                                                "kind": "ExpressionStatement",
                                                "text": "\n            await client.authenticate();",
                                                "children": [
                                                  {
                                                    "kind": "AwaitExpression",
                                                    "text": "\n            await client.authenticate()",
                                                    "children": [
                                                      {
                                                        "kind": "AwaitKeyword",
                                                        "text": "\n            await",
                                                        "children": []
                                                      },
                                                      {
                                                        "kind": "CallExpression",
                                                        "text": " client.authenticate()",
                                                        "children": [
                                                          {
                                                            "kind": "PropertyAccessExpression",
                                                            "text": " client.authenticate",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " client",
                                                                "children": []
                                                              },
                                                              { "kind": "DotToken", "text": ".", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "authenticate",
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                          { "kind": "SyntaxList", "text": "", "children": [] },
                                                          { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                ]
                                              },
                                              {
                                                "kind": "ExpressionStatement",
                                                "text": "\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_UP;",
                                                "children": [
                                                  {
                                                    "kind": "BinaryExpression",
                                                    "text": "\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_UP",
                                                    "children": [
                                                      {
                                                        "kind": "PropertyAccessExpression",
                                                        "text": "\n            rdsServiceStatus.status",
                                                        "children": [
                                                          {
                                                            "kind": "Identifier",
                                                            "text": "\n            rdsServiceStatus",
                                                            "children": []
                                                          },
                                                          { "kind": "DotToken", "text": ".", "children": [] },
                                                          { "kind": "Identifier", "text": "status", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "FirstAssignment", "text": " =", "children": [] },
                                                      {
                                                        "kind": "PropertyAccessExpression",
                                                        "text": " CoreConstants.NW_MONITORING_STATUS_UP",
                                                        "children": [
                                                          {
                                                            "kind": "Identifier",
                                                            "text": " CoreConstants",
                                                            "children": []
                                                          },
                                                          { "kind": "DotToken", "text": ".", "children": [] },
                                                          {
                                                            "kind": "Identifier",
                                                            "text": "NW_MONITORING_STATUS_UP",
                                                            "children": []
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseBraceToken", "text": "\n        }", "children": [] }
                                        ]
                                      },
                                      {
                                        "kind": "CatchClause",
                                        "text": " catch (e) {\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN;\n        }",
                                        "children": [
                                          { "kind": "CatchKeyword", "text": " catch", "children": [] },
                                          { "kind": "OpenParenToken", "text": " (", "children": [] },
                                          {
                                            "kind": "VariableDeclaration",
                                            "text": "e",
                                            "children": [{ "kind": "Identifier", "text": "e", "children": [] }]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] },
                                          {
                                            "kind": "Block",
                                            "text": " {\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN;\n        }",
                                            "children": [
                                              { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                              {
                                                "kind": "SyntaxList",
                                                "text": "\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN;",
                                                "children": [
                                                  {
                                                    "kind": "ExpressionStatement",
                                                    "text": "\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN;",
                                                    "children": [
                                                      {
                                                        "kind": "BinaryExpression",
                                                        "text": "\n            rdsServiceStatus.status = CoreConstants.NW_MONITORING_STATUS_DOWN",
                                                        "children": [
                                                          {
                                                            "kind": "PropertyAccessExpression",
                                                            "text": "\n            rdsServiceStatus.status",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "\n            rdsServiceStatus",
                                                                "children": []
                                                              },
                                                              { "kind": "DotToken", "text": ".", "children": [] },
                                                              { "kind": "Identifier", "text": "status", "children": [] }
                                                            ]
                                                          },
                                                          { "kind": "FirstAssignment", "text": " =", "children": [] },
                                                          {
                                                            "kind": "PropertyAccessExpression",
                                                            "text": " CoreConstants.NW_MONITORING_STATUS_DOWN",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " CoreConstants",
                                                                "children": []
                                                              },
                                                              { "kind": "DotToken", "text": ".", "children": [] },
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "NW_MONITORING_STATUS_DOWN",
                                                                "children": []
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CloseBraceToken", "text": "\n        }", "children": [] }
                                            ]
                                          }
                                        ]
                                      },
                                      { "kind": "FinallyKeyword", "text": " finally", "children": [] },
                                      {
                                        "kind": "Block",
                                        "text": " {\n            client.close();\n        }",
                                        "children": [
                                          { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "\n            client.close();",
                                            "children": [
                                              {
                                                "kind": "ExpressionStatement",
                                                "text": "\n            client.close();",
                                                "children": [
                                                  {
                                                    "kind": "CallExpression",
                                                    "text": "\n            client.close()",
                                                    "children": [
                                                      {
                                                        "kind": "PropertyAccessExpression",
                                                        "text": "\n            client.close",
                                                        "children": [
                                                          {
                                                            "kind": "Identifier",
                                                            "text": "\n            client",
                                                            "children": []
                                                          },
                                                          { "kind": "DotToken", "text": ".", "children": [] },
                                                          { "kind": "Identifier", "text": "close", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                      { "kind": "SyntaxList", "text": "", "children": [] },
                                                      { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                    ]
                                                  },
                                                  { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseBraceToken", "text": "\n        }", "children": [] }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                            ]
                          },
                          {
                            "kind": "CatchClause",
                            "text": " catch (e) {\n        log.error('Unable to execute health check', e);\n    }",
                            "children": [
                              { "kind": "CatchKeyword", "text": " catch", "children": [] },
                              { "kind": "OpenParenToken", "text": " (", "children": [] },
                              {
                                "kind": "VariableDeclaration",
                                "text": "e",
                                "children": [{ "kind": "Identifier", "text": "e", "children": [] }]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] },
                              {
                                "kind": "Block",
                                "text": " {\n        log.error('Unable to execute health check', e);\n    }",
                                "children": [
                                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "\n        log.error('Unable to execute health check', e);",
                                    "children": [
                                      {
                                        "kind": "ExpressionStatement",
                                        "text": "\n        log.error('Unable to execute health check', e);",
                                        "children": [
                                          {
                                            "kind": "CallExpression",
                                            "text": "\n        log.error('Unable to execute health check', e)",
                                            "children": [
                                              {
                                                "kind": "PropertyAccessExpression",
                                                "text": "\n        log.error",
                                                "children": [
                                                  { "kind": "Identifier", "text": "\n        log", "children": [] },
                                                  { "kind": "DotToken", "text": ".", "children": [] },
                                                  { "kind": "Identifier", "text": "error", "children": [] }
                                                ]
                                              },
                                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                                              {
                                                "kind": "SyntaxList",
                                                "text": "'Unable to execute health check', e",
                                                "children": [
                                                  {
                                                    "kind": "StringLiteral",
                                                    "text": "'Unable to execute health check'",
                                                    "children": []
                                                  },
                                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                                  { "kind": "Identifier", "text": " e", "children": [] }
                                                ]
                                              },
                                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                                            ]
                                          },
                                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                                ]
                              }
                            ]
                          },
                          { "kind": "FinallyKeyword", "text": " finally", "children": [] },
                          {
                            "kind": "Block",
                            "text": " {\n        HealthCheck.reportHealthStatus(rdsServiceStatus, c);\n        callback(null, HealthCheck.generateHealthResponse(\n            context.functionName,\n            context.functionVersion,\n            rdsServiceStatus)\n        );\n    }",
                            "children": [
                              { "kind": "FirstPunctuation", "text": " {", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "\n        HealthCheck.reportHealthStatus(rdsServiceStatus, c);\n        callback(null, HealthCheck.generateHealthResponse(\n            context.functionName,\n            context.functionVersion,\n            rdsServiceStatus)\n        );",
                                "children": [
                                  {
                                    "kind": "ExpressionStatement",
                                    "text": "\n        HealthCheck.reportHealthStatus(rdsServiceStatus, c);",
                                    "children": [
                                      {
                                        "kind": "CallExpression",
                                        "text": "\n        HealthCheck.reportHealthStatus(rdsServiceStatus, c)",
                                        "children": [
                                          {
                                            "kind": "PropertyAccessExpression",
                                            "text": "\n        HealthCheck.reportHealthStatus",
                                            "children": [
                                              { "kind": "Identifier", "text": "\n        HealthCheck", "children": [] },
                                              { "kind": "DotToken", "text": ".", "children": [] },
                                              { "kind": "Identifier", "text": "reportHealthStatus", "children": [] }
                                            ]
                                          },
                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "rdsServiceStatus, c",
                                            "children": [
                                              { "kind": "Identifier", "text": "rdsServiceStatus", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              { "kind": "Identifier", "text": " c", "children": [] }
                                            ]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] }
                                        ]
                                      },
                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                    ]
                                  },
                                  {
                                    "kind": "ExpressionStatement",
                                    "text": "\n        callback(null, HealthCheck.generateHealthResponse(\n            context.functionName,\n            context.functionVersion,\n            rdsServiceStatus)\n        );",
                                    "children": [
                                      {
                                        "kind": "CallExpression",
                                        "text": "\n        callback(null, HealthCheck.generateHealthResponse(\n            context.functionName,\n            context.functionVersion,\n            rdsServiceStatus)\n        )",
                                        "children": [
                                          { "kind": "Identifier", "text": "\n        callback", "children": [] },
                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "null, HealthCheck.generateHealthResponse(\n            context.functionName,\n            context.functionVersion,\n            rdsServiceStatus)",
                                            "children": [
                                              { "kind": "NullKeyword", "text": "null", "children": [] },
                                              { "kind": "CommaToken", "text": ",", "children": [] },
                                              {
                                                "kind": "CallExpression",
                                                "text": " HealthCheck.generateHealthResponse(\n            context.functionName,\n            context.functionVersion,\n            rdsServiceStatus)",
                                                "children": [
                                                  {
                                                    "kind": "PropertyAccessExpression",
                                                    "text": " HealthCheck.generateHealthResponse",
                                                    "children": [
                                                      { "kind": "Identifier", "text": " HealthCheck", "children": [] },
                                                      { "kind": "DotToken", "text": ".", "children": [] },
                                                      {
                                                        "kind": "Identifier",
                                                        "text": "generateHealthResponse",
                                                        "children": []
                                                      }
                                                    ]
                                                  },
                                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                  {
                                                    "kind": "SyntaxList",
                                                    "text": "\n            context.functionName,\n            context.functionVersion,\n            rdsServiceStatus",
                                                    "children": [
                                                      {
                                                        "kind": "PropertyAccessExpression",
                                                        "text": "\n            context.functionName",
                                                        "children": [
                                                          {
                                                            "kind": "Identifier",
                                                            "text": "\n            context",
                                                            "children": []
                                                          },
                                                          { "kind": "DotToken", "text": ".", "children": [] },
                                                          {
                                                            "kind": "Identifier",
                                                            "text": "functionName",
                                                            "children": []
                                                          }
                                                        ]
                                                      },
                                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                                      {
                                                        "kind": "PropertyAccessExpression",
                                                        "text": "\n            context.functionVersion",
                                                        "children": [
                                                          {
                                                            "kind": "Identifier",
                                                            "text": "\n            context",
                                                            "children": []
                                                          },
                                                          { "kind": "DotToken", "text": ".", "children": [] },
                                                          {
                                                            "kind": "Identifier",
                                                            "text": "functionVersion",
                                                            "children": []
                                                          }
                                                        ]
                                                      },
                                                      { "kind": "CommaToken", "text": ",", "children": [] },
                                                      {
                                                        "kind": "Identifier",
                                                        "text": "\n            rdsServiceStatus",
                                                        "children": []
                                                      }
                                                    ]
                                                  },
                                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseParenToken", "text": "\n        )", "children": [] }
                                        ]
                                      },
                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                    ]
                                  }
                                ]
                              },
                              { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "FirstStatement",
    "text": "\n\nlet dbClient: Sequelize;",
    "children": [
      {
        "kind": "VariableDeclarationList",
        "text": "\n\nlet dbClient: Sequelize",
        "children": [
          { "kind": "LetKeyword", "text": "\n\nlet", "children": [] },
          {
            "kind": "SyntaxList",
            "text": " dbClient: Sequelize",
            "children": [
              {
                "kind": "VariableDeclaration",
                "text": " dbClient: Sequelize",
                "children": [
                  { "kind": "Identifier", "text": " dbClient", "children": [] },
                  { "kind": "ColonToken", "text": ":", "children": [] },
                  {
                    "kind": "TypeReference",
                    "text": " Sequelize",
                    "children": [{ "kind": "Identifier", "text": " Sequelize", "children": [] }]
                  }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "FirstStatement",
    "text": "\nconst applicationInitStatus = async (log: Log): Promise<void> => {\n    try {\n        if (!dbClient) {\n            dbClient = DbUtils.createClient();\n        }\n    } catch (err) {\n        log.error('error initializing application', err);\n        throw err;\n    }\n};",
    "children": [
      {
        "kind": "VariableDeclarationList",
        "text": "\nconst applicationInitStatus = async (log: Log): Promise<void> => {\n    try {\n        if (!dbClient) {\n            dbClient = DbUtils.createClient();\n        }\n    } catch (err) {\n        log.error('error initializing application', err);\n        throw err;\n    }\n}",
        "children": [
          { "kind": "ConstKeyword", "text": "\nconst", "children": [] },
          {
            "kind": "SyntaxList",
            "text": " applicationInitStatus = async (log: Log): Promise<void> => {\n    try {\n        if (!dbClient) {\n            dbClient = DbUtils.createClient();\n        }\n    } catch (err) {\n        log.error('error initializing application', err);\n        throw err;\n    }\n}",
            "children": [
              {
                "kind": "VariableDeclaration",
                "text": " applicationInitStatus = async (log: Log): Promise<void> => {\n    try {\n        if (!dbClient) {\n            dbClient = DbUtils.createClient();\n        }\n    } catch (err) {\n        log.error('error initializing application', err);\n        throw err;\n    }\n}",
                "children": [
                  { "kind": "Identifier", "text": " applicationInitStatus", "children": [] },
                  { "kind": "FirstAssignment", "text": " =", "children": [] },
                  {
                    "kind": "ArrowFunction",
                    "text": " async (log: Log): Promise<void> => {\n    try {\n        if (!dbClient) {\n            dbClient = DbUtils.createClient();\n        }\n    } catch (err) {\n        log.error('error initializing application', err);\n        throw err;\n    }\n}",
                    "children": [
                      {
                        "kind": "SyntaxList",
                        "text": " async",
                        "children": [{ "kind": "AsyncKeyword", "text": " async", "children": [] }]
                      },
                      { "kind": "OpenParenToken", "text": " (", "children": [] },
                      {
                        "kind": "SyntaxList",
                        "text": "log: Log",
                        "children": [
                          {
                            "kind": "Parameter",
                            "text": "log: Log",
                            "children": [
                              { "kind": "Identifier", "text": "log", "children": [] },
                              { "kind": "ColonToken", "text": ":", "children": [] },
                              {
                                "kind": "TypeReference",
                                "text": " Log",
                                "children": [{ "kind": "Identifier", "text": " Log", "children": [] }]
                              }
                            ]
                          }
                        ]
                      },
                      { "kind": "CloseParenToken", "text": ")", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Promise<void>",
                        "children": [
                          { "kind": "Identifier", "text": " Promise", "children": [] },
                          { "kind": "FirstBinaryOperator", "text": "<", "children": [] },
                          {
                            "kind": "SyntaxList",
                            "text": "void",
                            "children": [{ "kind": "VoidKeyword", "text": "void", "children": [] }]
                          },
                          { "kind": "GreaterThanToken", "text": ">", "children": [] }
                        ]
                      },
                      { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
                      {
                        "kind": "Block",
                        "text": " {\n    try {\n        if (!dbClient) {\n            dbClient = DbUtils.createClient();\n        }\n    } catch (err) {\n        log.error('error initializing application', err);\n        throw err;\n    }\n}",
                        "children": [
                          { "kind": "FirstPunctuation", "text": " {", "children": [] },
                          {
                            "kind": "SyntaxList",
                            "text": "\n    try {\n        if (!dbClient) {\n            dbClient = DbUtils.createClient();\n        }\n    } catch (err) {\n        log.error('error initializing application', err);\n        throw err;\n    }",
                            "children": [
                              {
                                "kind": "TryStatement",
                                "text": "\n    try {\n        if (!dbClient) {\n            dbClient = DbUtils.createClient();\n        }\n    } catch (err) {\n        log.error('error initializing application', err);\n        throw err;\n    }",
                                "children": [
                                  { "kind": "TryKeyword", "text": "\n    try", "children": [] },
                                  {
                                    "kind": "Block",
                                    "text": " {\n        if (!dbClient) {\n            dbClient = DbUtils.createClient();\n        }\n    }",
                                    "children": [
                                      { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                      {
                                        "kind": "SyntaxList",
                                        "text": "\n        if (!dbClient) {\n            dbClient = DbUtils.createClient();\n        }",
                                        "children": [
                                          {
                                            "kind": "IfStatement",
                                            "text": "\n        if (!dbClient) {\n            dbClient = DbUtils.createClient();\n        }",
                                            "children": [
                                              { "kind": "IfKeyword", "text": "\n        if", "children": [] },
                                              { "kind": "OpenParenToken", "text": " (", "children": [] },
                                              {
                                                "kind": "PrefixUnaryExpression",
                                                "text": "!dbClient",
                                                "children": [
                                                  { "kind": "ExclamationToken", "text": "!", "children": [] },
                                                  { "kind": "Identifier", "text": "dbClient", "children": [] }
                                                ]
                                              },
                                              { "kind": "CloseParenToken", "text": ")", "children": [] },
                                              {
                                                "kind": "Block",
                                                "text": " {\n            dbClient = DbUtils.createClient();\n        }",
                                                "children": [
                                                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                                  {
                                                    "kind": "SyntaxList",
                                                    "text": "\n            dbClient = DbUtils.createClient();",
                                                    "children": [
                                                      {
                                                        "kind": "ExpressionStatement",
                                                        "text": "\n            dbClient = DbUtils.createClient();",
                                                        "children": [
                                                          {
                                                            "kind": "BinaryExpression",
                                                            "text": "\n            dbClient = DbUtils.createClient()",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "\n            dbClient",
                                                                "children": []
                                                              },
                                                              {
                                                                "kind": "FirstAssignment",
                                                                "text": " =",
                                                                "children": []
                                                              },
                                                              {
                                                                "kind": "CallExpression",
                                                                "text": " DbUtils.createClient()",
                                                                "children": [
                                                                  {
                                                                    "kind": "PropertyAccessExpression",
                                                                    "text": " DbUtils.createClient",
                                                                    "children": [
                                                                      {
                                                                        "kind": "Identifier",
                                                                        "text": " DbUtils",
                                                                        "children": []
                                                                      },
                                                                      {
                                                                        "kind": "DotToken",
                                                                        "text": ".",
                                                                        "children": []
                                                                      },
                                                                      {
                                                                        "kind": "Identifier",
                                                                        "text": "createClient",
                                                                        "children": []
                                                                      }
                                                                    ]
                                                                  },
                                                                  {
                                                                    "kind": "OpenParenToken",
                                                                    "text": "(",
                                                                    "children": []
                                                                  },
                                                                  { "kind": "SyntaxList", "text": "", "children": [] },
                                                                  {
                                                                    "kind": "CloseParenToken",
                                                                    "text": ")",
                                                                    "children": []
                                                                  }
                                                                ]
                                                              }
                                                            ]
                                                          },
                                                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  { "kind": "CloseBraceToken", "text": "\n        }", "children": [] }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                                    ]
                                  },
                                  {
                                    "kind": "CatchClause",
                                    "text": " catch (err) {\n        log.error('error initializing application', err);\n        throw err;\n    }",
                                    "children": [
                                      { "kind": "CatchKeyword", "text": " catch", "children": [] },
                                      { "kind": "OpenParenToken", "text": " (", "children": [] },
                                      {
                                        "kind": "VariableDeclaration",
                                        "text": "err",
                                        "children": [{ "kind": "Identifier", "text": "err", "children": [] }]
                                      },
                                      { "kind": "CloseParenToken", "text": ")", "children": [] },
                                      {
                                        "kind": "Block",
                                        "text": " {\n        log.error('error initializing application', err);\n        throw err;\n    }",
                                        "children": [
                                          { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "\n        log.error('error initializing application', err);\n        throw err;",
                                            "children": [
                                              {
                                                "kind": "ExpressionStatement",
                                                "text": "\n        log.error('error initializing application', err);",
                                                "children": [
                                                  {
                                                    "kind": "CallExpression",
                                                    "text": "\n        log.error('error initializing application', err)",
                                                    "children": [
                                                      {
                                                        "kind": "PropertyAccessExpression",
                                                        "text": "\n        log.error",
                                                        "children": [
                                                          {
                                                            "kind": "Identifier",
                                                            "text": "\n        log",
                                                            "children": []
                                                          },
                                                          { "kind": "DotToken", "text": ".", "children": [] },
                                                          { "kind": "Identifier", "text": "error", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                      {
                                                        "kind": "SyntaxList",
                                                        "text": "'error initializing application', err",
                                                        "children": [
                                                          {
                                                            "kind": "StringLiteral",
                                                            "text": "'error initializing application'",
                                                            "children": []
                                                          },
                                                          { "kind": "CommaToken", "text": ",", "children": [] },
                                                          { "kind": "Identifier", "text": " err", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                    ]
                                                  },
                                                  { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                ]
                                              },
                                              {
                                                "kind": "ThrowStatement",
                                                "text": "\n        throw err;",
                                                "children": [
                                                  { "kind": "ThrowKeyword", "text": "\n        throw", "children": [] },
                                                  { "kind": "Identifier", "text": " err", "children": [] },
                                                  { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  },
  {
    "kind": "ExpressionStatement",
    "text": "\nexports.purgeSoldVehicles = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    CoreRuntime.createHandler(async (coreContext: CoreContext) => {\n        const log = coreContext.getLog();\n        const limit = event.limit || 500;\n        await applicationInitStatus(log);\n        await PurgeService.purge(limit, log, dbClient);\n        coreContext.ok();\n    })(event, context, callback);\n};",
    "children": [
      {
        "kind": "BinaryExpression",
        "text": "\nexports.purgeSoldVehicles = (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    CoreRuntime.createHandler(async (coreContext: CoreContext) => {\n        const log = coreContext.getLog();\n        const limit = event.limit || 500;\n        await applicationInitStatus(log);\n        await PurgeService.purge(limit, log, dbClient);\n        coreContext.ok();\n    })(event, context, callback);\n}",
        "children": [
          {
            "kind": "PropertyAccessExpression",
            "text": "\nexports.purgeSoldVehicles",
            "children": [
              { "kind": "Identifier", "text": "\nexports", "children": [] },
              { "kind": "DotToken", "text": ".", "children": [] },
              { "kind": "Identifier", "text": "purgeSoldVehicles", "children": [] }
            ]
          },
          { "kind": "FirstAssignment", "text": " =", "children": [] },
          {
            "kind": "ArrowFunction",
            "text": " (event: any, context: Context, callback: Callback) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n    CoreRuntime.createHandler(async (coreContext: CoreContext) => {\n        const log = coreContext.getLog();\n        const limit = event.limit || 500;\n        await applicationInitStatus(log);\n        await PurgeService.purge(limit, log, dbClient);\n        coreContext.ok();\n    })(event, context, callback);\n}",
            "children": [
              { "kind": "OpenParenToken", "text": " (", "children": [] },
              {
                "kind": "SyntaxList",
                "text": "event: any, context: Context, callback: Callback",
                "children": [
                  {
                    "kind": "Parameter",
                    "text": "event: any",
                    "children": [
                      { "kind": "Identifier", "text": "event", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      { "kind": "AnyKeyword", "text": " any", "children": [] }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " context: Context",
                    "children": [
                      { "kind": "Identifier", "text": " context", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Context",
                        "children": [{ "kind": "Identifier", "text": " Context", "children": [] }]
                      }
                    ]
                  },
                  { "kind": "CommaToken", "text": ",", "children": [] },
                  {
                    "kind": "Parameter",
                    "text": " callback: Callback",
                    "children": [
                      { "kind": "Identifier", "text": " callback", "children": [] },
                      { "kind": "ColonToken", "text": ":", "children": [] },
                      {
                        "kind": "TypeReference",
                        "text": " Callback",
                        "children": [{ "kind": "Identifier", "text": " Callback", "children": [] }]
                      }
                    ]
                  }
                ]
              },
              { "kind": "CloseParenToken", "text": ")", "children": [] },
              { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
              {
                "kind": "Block",
                "text": " {\n    context.callbackWaitsForEmptyEventLoop = false;\n    CoreRuntime.createHandler(async (coreContext: CoreContext) => {\n        const log = coreContext.getLog();\n        const limit = event.limit || 500;\n        await applicationInitStatus(log);\n        await PurgeService.purge(limit, log, dbClient);\n        coreContext.ok();\n    })(event, context, callback);\n}",
                "children": [
                  { "kind": "FirstPunctuation", "text": " {", "children": [] },
                  {
                    "kind": "SyntaxList",
                    "text": "\n    context.callbackWaitsForEmptyEventLoop = false;\n    CoreRuntime.createHandler(async (coreContext: CoreContext) => {\n        const log = coreContext.getLog();\n        const limit = event.limit || 500;\n        await applicationInitStatus(log);\n        await PurgeService.purge(limit, log, dbClient);\n        coreContext.ok();\n    })(event, context, callback);",
                    "children": [
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    context.callbackWaitsForEmptyEventLoop = false;",
                        "children": [
                          {
                            "kind": "BinaryExpression",
                            "text": "\n    context.callbackWaitsForEmptyEventLoop = false",
                            "children": [
                              {
                                "kind": "PropertyAccessExpression",
                                "text": "\n    context.callbackWaitsForEmptyEventLoop",
                                "children": [
                                  { "kind": "Identifier", "text": "\n    context", "children": [] },
                                  { "kind": "DotToken", "text": ".", "children": [] },
                                  { "kind": "Identifier", "text": "callbackWaitsForEmptyEventLoop", "children": [] }
                                ]
                              },
                              { "kind": "FirstAssignment", "text": " =", "children": [] },
                              { "kind": "FalseKeyword", "text": " false", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      },
                      {
                        "kind": "ExpressionStatement",
                        "text": "\n    CoreRuntime.createHandler(async (coreContext: CoreContext) => {\n        const log = coreContext.getLog();\n        const limit = event.limit || 500;\n        await applicationInitStatus(log);\n        await PurgeService.purge(limit, log, dbClient);\n        coreContext.ok();\n    })(event, context, callback);",
                        "children": [
                          {
                            "kind": "CallExpression",
                            "text": "\n    CoreRuntime.createHandler(async (coreContext: CoreContext) => {\n        const log = coreContext.getLog();\n        const limit = event.limit || 500;\n        await applicationInitStatus(log);\n        await PurgeService.purge(limit, log, dbClient);\n        coreContext.ok();\n    })(event, context, callback)",
                            "children": [
                              {
                                "kind": "CallExpression",
                                "text": "\n    CoreRuntime.createHandler(async (coreContext: CoreContext) => {\n        const log = coreContext.getLog();\n        const limit = event.limit || 500;\n        await applicationInitStatus(log);\n        await PurgeService.purge(limit, log, dbClient);\n        coreContext.ok();\n    })",
                                "children": [
                                  {
                                    "kind": "PropertyAccessExpression",
                                    "text": "\n    CoreRuntime.createHandler",
                                    "children": [
                                      { "kind": "Identifier", "text": "\n    CoreRuntime", "children": [] },
                                      { "kind": "DotToken", "text": ".", "children": [] },
                                      { "kind": "Identifier", "text": "createHandler", "children": [] }
                                    ]
                                  },
                                  { "kind": "OpenParenToken", "text": "(", "children": [] },
                                  {
                                    "kind": "SyntaxList",
                                    "text": "async (coreContext: CoreContext) => {\n        const log = coreContext.getLog();\n        const limit = event.limit || 500;\n        await applicationInitStatus(log);\n        await PurgeService.purge(limit, log, dbClient);\n        coreContext.ok();\n    }",
                                    "children": [
                                      {
                                        "kind": "ArrowFunction",
                                        "text": "async (coreContext: CoreContext) => {\n        const log = coreContext.getLog();\n        const limit = event.limit || 500;\n        await applicationInitStatus(log);\n        await PurgeService.purge(limit, log, dbClient);\n        coreContext.ok();\n    }",
                                        "children": [
                                          {
                                            "kind": "SyntaxList",
                                            "text": "async",
                                            "children": [{ "kind": "AsyncKeyword", "text": "async", "children": [] }]
                                          },
                                          { "kind": "OpenParenToken", "text": " (", "children": [] },
                                          {
                                            "kind": "SyntaxList",
                                            "text": "coreContext: CoreContext",
                                            "children": [
                                              {
                                                "kind": "Parameter",
                                                "text": "coreContext: CoreContext",
                                                "children": [
                                                  { "kind": "Identifier", "text": "coreContext", "children": [] },
                                                  { "kind": "ColonToken", "text": ":", "children": [] },
                                                  {
                                                    "kind": "TypeReference",
                                                    "text": " CoreContext",
                                                    "children": [
                                                      { "kind": "Identifier", "text": " CoreContext", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          { "kind": "CloseParenToken", "text": ")", "children": [] },
                                          { "kind": "EqualsGreaterThanToken", "text": " =>", "children": [] },
                                          {
                                            "kind": "Block",
                                            "text": " {\n        const log = coreContext.getLog();\n        const limit = event.limit || 500;\n        await applicationInitStatus(log);\n        await PurgeService.purge(limit, log, dbClient);\n        coreContext.ok();\n    }",
                                            "children": [
                                              { "kind": "FirstPunctuation", "text": " {", "children": [] },
                                              {
                                                "kind": "SyntaxList",
                                                "text": "\n        const log = coreContext.getLog();\n        const limit = event.limit || 500;\n        await applicationInitStatus(log);\n        await PurgeService.purge(limit, log, dbClient);\n        coreContext.ok();",
                                                "children": [
                                                  {
                                                    "kind": "FirstStatement",
                                                    "text": "\n        const log = coreContext.getLog();",
                                                    "children": [
                                                      {
                                                        "kind": "VariableDeclarationList",
                                                        "text": "\n        const log = coreContext.getLog()",
                                                        "children": [
                                                          {
                                                            "kind": "ConstKeyword",
                                                            "text": "\n        const",
                                                            "children": []
                                                          },
                                                          {
                                                            "kind": "SyntaxList",
                                                            "text": " log = coreContext.getLog()",
                                                            "children": [
                                                              {
                                                                "kind": "VariableDeclaration",
                                                                "text": " log = coreContext.getLog()",
                                                                "children": [
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": " log",
                                                                    "children": []
                                                                  },
                                                                  {
                                                                    "kind": "FirstAssignment",
                                                                    "text": " =",
                                                                    "children": []
                                                                  },
                                                                  {
                                                                    "kind": "CallExpression",
                                                                    "text": " coreContext.getLog()",
                                                                    "children": [
                                                                      {
                                                                        "kind": "PropertyAccessExpression",
                                                                        "text": " coreContext.getLog",
                                                                        "children": [
                                                                          {
                                                                            "kind": "Identifier",
                                                                            "text": " coreContext",
                                                                            "children": []
                                                                          },
                                                                          {
                                                                            "kind": "DotToken",
                                                                            "text": ".",
                                                                            "children": []
                                                                          },
                                                                          {
                                                                            "kind": "Identifier",
                                                                            "text": "getLog",
                                                                            "children": []
                                                                          }
                                                                        ]
                                                                      },
                                                                      {
                                                                        "kind": "OpenParenToken",
                                                                        "text": "(",
                                                                        "children": []
                                                                      },
                                                                      {
                                                                        "kind": "SyntaxList",
                                                                        "text": "",
                                                                        "children": []
                                                                      },
                                                                      {
                                                                        "kind": "CloseParenToken",
                                                                        "text": ")",
                                                                        "children": []
                                                                      }
                                                                    ]
                                                                  }
                                                                ]
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  },
                                                  {
                                                    "kind": "FirstStatement",
                                                    "text": "\n        const limit = event.limit || 500;",
                                                    "children": [
                                                      {
                                                        "kind": "VariableDeclarationList",
                                                        "text": "\n        const limit = event.limit || 500",
                                                        "children": [
                                                          {
                                                            "kind": "ConstKeyword",
                                                            "text": "\n        const",
                                                            "children": []
                                                          },
                                                          {
                                                            "kind": "SyntaxList",
                                                            "text": " limit = event.limit || 500",
                                                            "children": [
                                                              {
                                                                "kind": "VariableDeclaration",
                                                                "text": " limit = event.limit || 500",
                                                                "children": [
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": " limit",
                                                                    "children": []
                                                                  },
                                                                  {
                                                                    "kind": "FirstAssignment",
                                                                    "text": " =",
                                                                    "children": []
                                                                  },
                                                                  {
                                                                    "kind": "BinaryExpression",
                                                                    "text": " event.limit || 500",
                                                                    "children": [
                                                                      {
                                                                        "kind": "PropertyAccessExpression",
                                                                        "text": " event.limit",
                                                                        "children": [
                                                                          {
                                                                            "kind": "Identifier",
                                                                            "text": " event",
                                                                            "children": []
                                                                          },
                                                                          {
                                                                            "kind": "DotToken",
                                                                            "text": ".",
                                                                            "children": []
                                                                          },
                                                                          {
                                                                            "kind": "Identifier",
                                                                            "text": "limit",
                                                                            "children": []
                                                                          }
                                                                        ]
                                                                      },
                                                                      {
                                                                        "kind": "BarBarToken",
                                                                        "text": " ||",
                                                                        "children": []
                                                                      },
                                                                      {
                                                                        "kind": "FirstLiteralToken",
                                                                        "text": " 500",
                                                                        "children": []
                                                                      }
                                                                    ]
                                                                  }
                                                                ]
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  },
                                                  {
                                                    "kind": "ExpressionStatement",
                                                    "text": "\n        await applicationInitStatus(log);",
                                                    "children": [
                                                      {
                                                        "kind": "AwaitExpression",
                                                        "text": "\n        await applicationInitStatus(log)",
                                                        "children": [
                                                          {
                                                            "kind": "AwaitKeyword",
                                                            "text": "\n        await",
                                                            "children": []
                                                          },
                                                          {
                                                            "kind": "CallExpression",
                                                            "text": " applicationInitStatus(log)",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": " applicationInitStatus",
                                                                "children": []
                                                              },
                                                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                              {
                                                                "kind": "SyntaxList",
                                                                "text": "log",
                                                                "children": [
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": "log",
                                                                    "children": []
                                                                  }
                                                                ]
                                                              },
                                                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  },
                                                  {
                                                    "kind": "ExpressionStatement",
                                                    "text": "\n        await PurgeService.purge(limit, log, dbClient);",
                                                    "children": [
                                                      {
                                                        "kind": "AwaitExpression",
                                                        "text": "\n        await PurgeService.purge(limit, log, dbClient)",
                                                        "children": [
                                                          {
                                                            "kind": "AwaitKeyword",
                                                            "text": "\n        await",
                                                            "children": []
                                                          },
                                                          {
                                                            "kind": "CallExpression",
                                                            "text": " PurgeService.purge(limit, log, dbClient)",
                                                            "children": [
                                                              {
                                                                "kind": "PropertyAccessExpression",
                                                                "text": " PurgeService.purge",
                                                                "children": [
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": " PurgeService",
                                                                    "children": []
                                                                  },
                                                                  { "kind": "DotToken", "text": ".", "children": [] },
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": "purge",
                                                                    "children": []
                                                                  }
                                                                ]
                                                              },
                                                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                              {
                                                                "kind": "SyntaxList",
                                                                "text": "limit, log, dbClient",
                                                                "children": [
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": "limit",
                                                                    "children": []
                                                                  },
                                                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": " log",
                                                                    "children": []
                                                                  },
                                                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                                                  {
                                                                    "kind": "Identifier",
                                                                    "text": " dbClient",
                                                                    "children": []
                                                                  }
                                                                ]
                                                              },
                                                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  },
                                                  {
                                                    "kind": "ExpressionStatement",
                                                    "text": "\n        coreContext.ok();",
                                                    "children": [
                                                      {
                                                        "kind": "CallExpression",
                                                        "text": "\n        coreContext.ok()",
                                                        "children": [
                                                          {
                                                            "kind": "PropertyAccessExpression",
                                                            "text": "\n        coreContext.ok",
                                                            "children": [
                                                              {
                                                                "kind": "Identifier",
                                                                "text": "\n        coreContext",
                                                                "children": []
                                                              },
                                                              { "kind": "DotToken", "text": ".", "children": [] },
                                                              { "kind": "Identifier", "text": "ok", "children": [] }
                                                            ]
                                                          },
                                                          { "kind": "OpenParenToken", "text": "(", "children": [] },
                                                          { "kind": "SyntaxList", "text": "", "children": [] },
                                                          { "kind": "CloseParenToken", "text": ")", "children": [] }
                                                        ]
                                                      },
                                                      { "kind": "SemicolonToken", "text": ";", "children": [] }
                                                    ]
                                                  }
                                                ]
                                              },
                                              { "kind": "CloseBraceToken", "text": "\n    }", "children": [] }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  { "kind": "CloseParenToken", "text": ")", "children": [] }
                                ]
                              },
                              { "kind": "OpenParenToken", "text": "(", "children": [] },
                              {
                                "kind": "SyntaxList",
                                "text": "event, context, callback",
                                "children": [
                                  { "kind": "Identifier", "text": "event", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " context", "children": [] },
                                  { "kind": "CommaToken", "text": ",", "children": [] },
                                  { "kind": "Identifier", "text": " callback", "children": [] }
                                ]
                              },
                              { "kind": "CloseParenToken", "text": ")", "children": [] }
                            ]
                          },
                          { "kind": "SemicolonToken", "text": ";", "children": [] }
                        ]
                      }
                    ]
                  },
                  { "kind": "CloseBraceToken", "text": "\n}", "children": [] }
                ]
              }
            ]
          }
        ]
      },
      { "kind": "SemicolonToken", "text": ";", "children": [] }
    ]
  }
]
